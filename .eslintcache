[{"C:\\React\\agaev_digital\\express-admin\\src\\index.js":"1","C:\\React\\agaev_digital\\express-admin\\src\\reportWebVitals.js":"2","C:\\React\\agaev_digital\\express-admin\\src\\App.js":"3","C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\redux-store.ts":"4","C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\app-reducer.ts":"5","C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\user-reducer.ts":"6","C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\profile-reducer.ts":"7","C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\form-reducer.ts":"8","C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\order-reducer.ts":"9","C:\\React\\agaev_digital\\express-admin\\src\\components\\Content\\Content.tsx":"10","C:\\React\\agaev_digital\\express-admin\\src\\components\\Auth\\Auth.tsx":"11","C:\\React\\agaev_digital\\express-admin\\src\\components\\Sidebar\\Sidebar.tsx":"12","C:\\React\\agaev_digital\\express-admin\\src\\components\\Spinner\\Spinner.tsx":"13","C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\page-reducer.ts":"14","C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\errors-reducer.tsx":"15","C:\\React\\agaev_digital\\express-admin\\src\\components\\API\\API.ts":"16","C:\\React\\agaev_digital\\express-admin\\src\\components\\Info\\Info.tsx":"17","C:\\React\\agaev_digital\\express-admin\\src\\components\\Main\\Main.tsx":"18","C:\\React\\agaev_digital\\express-admin\\src\\components\\Users\\Users.tsx":"19","C:\\React\\agaev_digital\\express-admin\\src\\components\\Orders\\Order\\Order.tsx":"20","C:\\React\\agaev_digital\\express-admin\\src\\components\\Orders\\Orders.tsx":"21","C:\\React\\agaev_digital\\express-admin\\src\\components\\common\\Label\\Lable.tsx":"22","C:\\React\\agaev_digital\\express-admin\\src\\components\\common\\Input\\Input.tsx":"23","C:\\React\\agaev_digital\\express-admin\\src\\components\\utils\\validate\\validate.tsx":"24","C:\\React\\agaev_digital\\express-admin\\src\\components\\Page\\Page.tsx":"25","C:\\React\\agaev_digital\\express-admin\\src\\components\\Users\\User\\User.tsx":"26","C:\\React\\agaev_digital\\express-admin\\src\\components\\common\\Manage\\Manage.tsx":"27","C:\\React\\agaev_digital\\express-admin\\src\\components\\Orders\\Order\\Docs\\Docs.tsx":"28","C:\\React\\agaev_digital\\express-admin\\src\\components\\common\\Radios\\Radios.tsx":"29","C:\\React\\agaev_digital\\express-admin\\src\\components\\Page\\Posibility\\Posibility.tsx":"30","C:\\React\\agaev_digital\\express-admin\\src\\components\\Page\\Additional\\Additional.tsx":"31","C:\\React\\agaev_digital\\express-admin\\src\\components\\Page\\Table\\Table.tsx":"32"},{"size":596,"mtime":1610204261260,"results":"33","hashOfConfig":"34"},{"size":362,"mtime":499162500000,"results":"35","hashOfConfig":"34"},{"size":1032,"mtime":1611425031826,"results":"36","hashOfConfig":"34"},{"size":986,"mtime":1611329864321,"results":"37","hashOfConfig":"34"},{"size":2412,"mtime":1611426371933,"results":"38","hashOfConfig":"34"},{"size":6317,"mtime":1611165271712,"results":"39","hashOfConfig":"34"},{"size":2407,"mtime":1610815133369,"results":"40","hashOfConfig":"34"},{"size":3411,"mtime":1610797253761,"results":"41","hashOfConfig":"34"},{"size":8950,"mtime":1611483934719,"results":"42","hashOfConfig":"34"},{"size":959,"mtime":1611251674404,"results":"43","hashOfConfig":"34"},{"size":2726,"mtime":1610816616171,"results":"44","hashOfConfig":"34"},{"size":1415,"mtime":1610819378682,"results":"45","hashOfConfig":"34"},{"size":398,"mtime":1610814617694,"results":"46","hashOfConfig":"34"},{"size":2595,"mtime":1611426414705,"results":"47","hashOfConfig":"34"},{"size":3465,"mtime":1608447632283,"results":"48","hashOfConfig":"34"},{"size":3215,"mtime":1611483243894,"results":"49","hashOfConfig":"34"},{"size":2418,"mtime":1611162247888,"results":"50","hashOfConfig":"34"},{"size":3465,"mtime":1611246168801,"results":"51","hashOfConfig":"34"},{"size":3741,"mtime":1611165289721,"results":"52","hashOfConfig":"34"},{"size":7327,"mtime":1611484902262,"results":"53","hashOfConfig":"34"},{"size":2396,"mtime":1611484101758,"results":"54","hashOfConfig":"34"},{"size":358,"mtime":1609174923181,"results":"55","hashOfConfig":"34"},{"size":9951,"mtime":1610789888617,"results":"56","hashOfConfig":"34"},{"size":3096,"mtime":1610790299280,"results":"57","hashOfConfig":"34"},{"size":5101,"mtime":1611427539462,"results":"58","hashOfConfig":"34"},{"size":2894,"mtime":1611081754550,"results":"59","hashOfConfig":"34"},{"size":2056,"mtime":1611163774910,"results":"60","hashOfConfig":"34"},{"size":7297,"mtime":1610994235797,"results":"61","hashOfConfig":"34"},{"size":2055,"mtime":1610898653479,"results":"62","hashOfConfig":"34"},{"size":5688,"mtime":1611427043188,"results":"63","hashOfConfig":"34"},{"size":8134,"mtime":1611427035339,"results":"64","hashOfConfig":"34"},{"size":10803,"mtime":1611428277069,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1l19ofe",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"77"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"77"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"77"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"77"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"77"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"77"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"77"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"77"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"77"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"77"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"77"},"C:\\React\\agaev_digital\\express-admin\\src\\index.js",[],["145","146"],"C:\\React\\agaev_digital\\express-admin\\src\\reportWebVitals.js",[],"C:\\React\\agaev_digital\\express-admin\\src\\App.js",["147"],"import React, {useEffect} from \"react\";\r\nimport './App.css';\r\nimport Sidebar from \"./components/Sidebar/Sidebar\";\r\nimport Content from \"./components/Content/Content\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Auth from \"./components/Auth/Auth\";\r\nimport Spinner from \"./components/Spinner/Spinner\";\r\nimport {checkUser} from \"./components/redux/app-reducer\";\r\n\r\nfunction App() {\r\n    const { isReady, isAjax, isAuth } = useSelector( (state) => state.app);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(checkUser());\r\n    }, [])\r\n\r\n    if(!isReady) {\r\n        return <Spinner isWhite={true} />\r\n    }\r\n\r\n    if(!isAuth) {\r\n        return <Auth />\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <BrowserRouter>\r\n                {isAjax? <Spinner isWhite={false} /> : \"\"}\r\n                <Sidebar/>\r\n                <Content/>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\redux-store.ts",["148"],"import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleWare from \"redux-thunk\";\r\nimport appReducer from \"./app-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport userReducer from \"./user-reducer\";\r\nimport errorsReducer from \"./errors-reducer\";\r\nimport formReducer from \"./form-reducer\";\r\nimport orderReducer from \"./order-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport pageReducer from \"./page-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    app: appReducer,\r\n    profile: profileReducer,\r\n    user: userReducer,\r\n    errors: errorsReducer,\r\n    forms: formReducer,\r\n    orders: orderReducer,\r\n    page: pageReducer,\r\n});\r\n\r\nconst initialState = {};\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleWare)));\r\n\r\nexport default store;",["149","150"],"C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\app-reducer.ts",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\user-reducer.ts",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\profile-reducer.ts",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\form-reducer.ts",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\order-reducer.ts",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\Content\\Content.tsx",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\Auth\\Auth.tsx",["151"],"import React, {useEffect} from \"react\";\r\nimport c from \"./Auth.module.css\";\r\nimport Label from \"../common/Label/Lable\";\r\nimport Input from \"../common/Input/Input\";\r\nimport {FormProvider, useForm} from \"react-hook-form\";\r\nimport {getValidateProps} from \"../utils/validate/validate\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {setLoginErrorAction} from \"../redux/form-reducer\";\r\nimport {LoginType, loginUser} from \"../redux/profile-reducer\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\n\r\nconst Auth = () => {\r\n    const methods = useForm({\r\n        shouldFocusError: false,\r\n    });\r\n\r\n    const { register, handleSubmit, errors, setError } = methods;\r\n\r\n    const isAjax= useSelector((state: AppStateType) => state.app.isAjax);\r\n\r\n    const { loginError } = useSelector((state:AppStateType) => state.forms);\r\n    const dispatch = useDispatch();\r\n\r\n    const sendForm = (data: LoginType) => {\r\n        dispatch(loginUser(data));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(loginError) {\r\n            setError(\"email\", {type: \"maniual\", message: \"\"});\r\n            setError(\"password\", {type: \"maniual\", message: loginError});\r\n            dispatch(setLoginErrorAction(null));\r\n        }\r\n    }, [loginError])\r\n\r\n    return (\r\n\r\n        <div className={c.auth}>\r\n            {isAjax? <Spinner isWhite={false} /> : \"\"}\r\n            <div className={c.auth__window}>\r\n                <div className={c.auth__title}>\r\n                    Вход в админ панель\r\n                </div>\r\n                <FormProvider {...methods}>\r\n                    <form className={c.auth__form} onSubmit={handleSubmit(sendForm)}>\r\n                        <Label>\r\n                            <Input className={c.auth__input} name=\"email\" type=\"email\" placeholder=\"email\"\r\n                                   error={true} register={register} errorData={errors}\r\n                                   validateProps={getValidateProps({standart: [\"required\"], custom: []})}/>\r\n                        </Label>\r\n                        <Label>\r\n                            <Input className={c.auth__input} name=\"password\" type=\"password\" placeholder=\"password\"\r\n                                   error={true} register={register} errorData={errors}\r\n                                   validateProps={getValidateProps({standart: [\"required\"], custom: []})}/>\r\n                        </Label>\r\n                        <button className={c.auth__button + \" btn\"}>\r\n                            Войти\r\n                        </button>\r\n                    </form>\r\n                </FormProvider>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Auth;","C:\\React\\agaev_digital\\express-admin\\src\\components\\Sidebar\\Sidebar.tsx",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\Spinner\\Spinner.tsx",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\page-reducer.ts",["152","153","154","155"],"import {DataTableType} from \"../Page/Page\";\r\nimport {PosibilityType} from \"../Page/Posibility/Posibility\";\r\nimport {AdditionalType} from \"../Page/Additional/Additional\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {setIsAjaxAction, SetIsAjaxActionType} from \"./app-reducer\";\r\nimport {pageAPI} from \"../API/API\";\r\n\r\nconst SET_PAGE_DATA = \"SET_PAGE_DATA\";\r\nconst ADD_ROW = \"ADD_ROW\";\r\nconst ADD_COLUMN = \"ADD_COLUMN\";\r\nconst DELETE_ROW = \"DELETE_ROW\";\r\nconst DELETE_COLUMN = \"DELETE_COLUMN\";\r\n\r\nconst initialState = {\r\n    name: null as string | null,\r\n    titleTop: null as string | null,\r\n    titleMain: null as string | null,\r\n    titleDoc: null as string | null,\r\n    table: null as DataTableType | null,\r\n    posibilities: null as PosibilityType | null,\r\n    services: null as PosibilityType | null,\r\n    additional: null as AdditionalType | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst pageReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_PAGE_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionTypes = SetPageDataActionType\r\n\r\ntype OtherActionTypes = SetIsAjaxActionType\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes | OtherActionTypes>;\r\n\r\nexport type PageData = {\r\n    name: string\r\n    titleTop: string\r\n    titleMain: string\r\n    titleDoc: string\r\n    tabel: DataTableType\r\n    posibilities: PosibilityType\r\n    services: PosibilityType\r\n    additional: AdditionalType\r\n}\r\n\r\ntype SetPageDataActionType = {\r\n    type: typeof SET_PAGE_DATA\r\n    data: PageData\r\n}\r\n\r\nconst setPageDataAction = (data: PageData): SetPageDataActionType => ({type: SET_PAGE_DATA, data});\r\n\r\nexport const sendDataPage = (data: any): ThunkType => {\r\n    return async (dispatch) => {\r\n        await dispatch(setIsAjaxAction(true));\r\n        const response = await pageAPI.sendData(data);\r\n        if(response.success) {\r\n            await dispatch(getDataPage());\r\n        }\r\n        await dispatch(setIsAjaxAction(false));\r\n    }\r\n}\r\n\r\nexport const getDataPage = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        await dispatch(setIsAjaxAction(true));\r\n        const response = await pageAPI.getData();\r\n        if(response.success) {\r\n            await dispatch(setPageDataAction(response.data));\r\n        }\r\n        await dispatch(setIsAjaxAction(false));\r\n    }\r\n}\r\n\r\n\r\nexport default pageReducer;","C:\\React\\agaev_digital\\express-admin\\src\\components\\redux\\errors-reducer.tsx",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\API\\API.ts",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\Info\\Info.tsx",["156","157"],"import React, {useEffect} from \"react\";\r\nimport c from \"./Info.module.css\";\r\nimport Orders from \"../Orders/Orders\";\r\nimport {getOneUser, UserType} from \"../redux/user-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {NavLink, useParams} from \"react-router-dom\";\r\nimport {ParamsType} from \"../Orders/Order/Order\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nconst Info = () => {\r\n\r\n    const { id } = useParams<ParamsType>();\r\n\r\n    const currentUser = useSelector((state: AppStateType) => state.user.currentUser);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getOneUser(Number(id)));\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={c.info}>\r\n            <div className={c.info__title + \" title\"}>\r\n                Пользователь: Иванов Иван Иванович\r\n            </div>\r\n            <NavLink to=\"/users\" className={c.info__back + \" btn\"}>\r\n                Назад\r\n            </NavLink>\r\n            <div className={c.info__user}>\r\n                <span className={`${c.info__name} ${c.info__block}`}>\r\n                    Имя: {currentUser?.name}\r\n                </span>\r\n                <span className={`${c.info__phone} ${c.info__block}`}>\r\n                    Телефон: {currentUser?.phone}\r\n                </span>\r\n                <span className={`${c.info__address} ${c.info__block}`}>\r\n                    Адрес: {currentUser?.address}\r\n                </span>\r\n                <span className={`${c.info__type} ${c.info__block}`}>\r\n                    Физ. / Юр. {currentUser?.type}\r\n                </span>\r\n                <span className={`${c[\"info__name-organization\"]} ${c.info__block}`}>\r\n                    Название организации: {currentUser?.name_organization}\r\n                </span>\r\n                <span className={`${c.info__inn} ${c.info__block}`}>\r\n                    ИНН: {currentUser?.inn}\r\n                </span>\r\n                <span className={`${c.info__ogrn} ${c.info__block}`}>\r\n                    ОГРН: {currentUser?.ogrn}\r\n                </span>\r\n            </div>\r\n            <div className={c.info__orders}>\r\n                {\r\n                    currentUser?\r\n                        <Orders userId={Number(id)}/> : \"\"\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Info;","C:\\React\\agaev_digital\\express-admin\\src\\components\\Main\\Main.tsx",["158"],"import React, {useState} from \"react\";\r\nimport c from \"./Main.module.css\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport Input from \"../common/Input/Input\";\r\nimport {FormProvider, useForm} from \"react-hook-form\";\r\nimport {getValidateProps} from \"../utils/validate/validate\";\r\nimport Label from \"../common/Label/Lable\";\r\n\r\nconst Main = () => {\r\n    const [isChange, setIsChange] = useState(false);\r\n\r\n    const {id, name, email, position} = useSelector((state: AppStateType) => state.profile);\r\n\r\n    const methods = useForm({\r\n        shouldFocusError: false,\r\n    });\r\n\r\n    const {register, handleSubmit, errors} = methods;\r\n\r\n    const sendForm = (data: any) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={c.main}>\r\n            <div className={c.main__title + \" title\"}>\r\n                Информация о пользователе админ панели\r\n            </div>\r\n            <button className={c.main__button + \" btn\"} onClick={() => setIsChange(!isChange)}>\r\n                {isChange ? \"Закончить изменения\" : \"Изменить данные\"}\r\n            </button>\r\n            {!isChange ?\r\n                <>\r\n                    <div className={`${c.main__name} ${c.main__block}`}>\r\n                        Имя: {name}\r\n                    </div>\r\n                    <div className={`${c.main__email} ${c.main__block}`}>\r\n                        Email: {email}\r\n                    </div>\r\n                    <div className={`${c.main__position} ${c.main__block}`}>\r\n                        Должность: {position === \"admin\" ? \"Администратор\" : \"Менеджер\"}\r\n                    </div>\r\n                </>\r\n                :\r\n                <FormProvider {...methods}>\r\n                    <form className={c.main__form} onSubmit={handleSubmit(sendForm)}>\r\n                        <Label className={c.main__label}>\r\n                            <Input className={c.main__input} name=\"name\" type=\"\" placeholder=\"Имя\" error={true}\r\n                                   register={register} errorData={errors}\r\n                                   validateProps={getValidateProps({standart: [\"required\"], custom: []})}/>\r\n                        </Label>\r\n                        <Label className={c.main__label}>\r\n                            <Input className={c.main__input} name=\"password\" type=\"\" placeholder=\"Новый пароль\" error={true}\r\n                                   register={register} errorData={errors}\r\n                                   validateProps={getValidateProps({standart: [\"required\"], custom: []})}/>\r\n                        </Label>\r\n                        <Label className={c.main__label}>\r\n                            <Input className={c.main__input} name=\"password\" type=\"\" placeholder=\"Повторите пароль\"\r\n                                   error={true}\r\n                                   register={register} errorData={errors}\r\n                                   validateProps={getValidateProps({standart: [\"required\"], custom: []})}/>\r\n                        </Label>\r\n                        <button className={c.main__accept + \" btn\"}>\r\n                            Применить изменения\r\n                        </button>\r\n                    </form>\r\n                </FormProvider>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","C:\\React\\agaev_digital\\express-admin\\src\\components\\Users\\Users.tsx",["159","160","161","162","163"],"import React, {useEffect, useState} from \"react\";\r\nimport c from \"./Users.module.css\";\r\nimport User from \"./User/User\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {\r\n    getUsers,\r\n    setCurrentPageUserAction,\r\n    setDateCreateFilterUserAction, setNameFilterUserAction,\r\n    setSearchFilterUserAction\r\n} from \"../redux/user-reducer\";\r\nimport {setCurrentPageOrderAction} from \"../redux/order-reducer\";\r\nimport Manage from \"../common/Manage/Manage\";\r\n\r\ntype PropsType = any\r\n\r\nconst Users: React.FC<PropsType> = (props) => {\r\n    const [nameFilter, setNameFilter] = useState<null | \"asc\" | \"desc\">(null);\r\n    const [dateCreateFilter, setDateCreateFilter] = useState<null | \"asc\" | \"desc\">(null);\r\n    const [searchFilter, setSearchFilter] = useState(null);\r\n\r\n    const { currentPage, countPages, countNeed, users, countUsers, filters } = useSelector((state: AppStateType) => state.user);\r\n\r\n    const [currentPageOfManage, setCurrentPageOfManage] = useState(currentPage);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsers({searchFilter: null, name: null, dateCreate: null, currentPage, countNeed}));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        changeCurrentPage();\r\n    }, [currentPageOfManage])\r\n\r\n    useEffect(() => {\r\n        changeFilter();\r\n    }, [nameFilter, dateCreateFilter, searchFilter]);\r\n\r\n    const changeFilter = async () => {\r\n        await dispatch(setNameFilterUserAction(nameFilter));\r\n        await dispatch(setDateCreateFilterUserAction(dateCreateFilter));\r\n        await dispatch(setSearchFilterUserAction(searchFilter));\r\n        await changeCurrentPage();\r\n    }\r\n\r\n    const changeCurrentPage = async () => {\r\n        await dispatch(setCurrentPageUserAction(currentPageOfManage));\r\n        await dispatch(getUsers({searchFilter: filters.searchFilter, name: filters.name, dateCreate: filters.dateCreate, currentPage, countNeed}));\r\n    }\r\n\r\n    const changeNameFilter = () => {\r\n        if(!nameFilter || nameFilter === \"desc\") {\r\n            setNameFilter(\"asc\");\r\n        }else {\r\n            setNameFilter(\"desc\");\r\n        }\r\n    }\r\n\r\n    const changeDateCreateFilter = () => {\r\n        if(!dateCreateFilter || dateCreateFilter === \"desc\") {\r\n            setDateCreateFilter(\"asc\");\r\n        }else {\r\n            setDateCreateFilter(\"desc\");\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className={c.users}>\r\n            <div className={c.users__title + \" title\"}>\r\n                Список всех пользователей\r\n            </div>\r\n            <div className={c.users__count}>\r\n                Найдено пользователей: {countUsers}\r\n            </div>\r\n            <div className={c.users__filters}>\r\n                <div className={c.users__minititle}>Сортировка</div>\r\n                <div className={c.users__list}>\r\n                    <div className={c.users__name} onClick={changeNameFilter}>\r\n                        По имени\r\n                    </div>\r\n                    <div className={c.users__create} onClick={changeDateCreateFilter}>\r\n                        По дате регистрации\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={c.users__content}>\r\n                {\r\n                    users? users.map((u, index) => {\r\n                        return <User data={u} index={index}/>\r\n                    }) : \"\"\r\n                }\r\n\r\n            </div>\r\n            <Manage countPages={countPages} currentPage={currentPage}\r\n                    setCurrentPage={(page) => setCurrentPageOfManage(page)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;","C:\\React\\agaev_digital\\express-admin\\src\\components\\Orders\\Order\\Order.tsx",["164","165"],"C:\\React\\agaev_digital\\express-admin\\src\\components\\Orders\\Orders.tsx",["166","167","168","169","170","171"],"C:\\React\\agaev_digital\\express-admin\\src\\components\\common\\Label\\Lable.tsx",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\common\\Input\\Input.tsx",["172","173","174","175","176","177","178","179","180","181","182"],"import React, {useEffect, useState} from \"react\";\r\nimport { ValidateCustomType } from \"../../utils/validate/validate\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {Controller, useFormContext} from \"react-hook-form\";\r\nimport MaskedInput from \"react-input-mask\"\r\nimport {clearAll} from \"../../redux/errors-reducer\";\r\nimport {clearAdressesAction, getCorrectAddress} from \"../../redux/form-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype RefReturn =\r\n    | string\r\n    | ((instance: HTMLInputElement | null) => void)\r\n    | React.RefObject<HTMLInputElement>\r\n    | null\r\n    | undefined;\r\n\r\nexport type RegisterType = (validateProps: any) => RefReturn\r\n\r\ntype PropsType = {\r\n    className: string\r\n    name: string\r\n    type: string\r\n    placeholder: string\r\n    error: boolean\r\n    validateProps?: any //ValidateCustomType\r\n    register?: RegisterType\r\n    errorData?:any /*{\r\n        name: {\r\n            type: string,\r\n            types: Array<{ validateName: string | boolean }>,\r\n            message: string,\r\n            ref: any,\r\n        }\r\n\r\n    }*/\r\n    value?: string\r\n    defaultValue?: string\r\n    setInputValue?: (value: string) => void //use state, to use old value, for example old address or old name and phone\r\n    inputValue?: string\r\n\r\n    disabled?: boolean\r\n    setError?: any //react hook form\r\n    customError?: {type: string, message: string}\r\n\r\n\r\n    autoComplete?: \"off\"//prompt standart of browser off\r\n}\r\n\r\nconst Input: React.FC<PropsType> = (props) => {\r\n    const [thisValue, setThisValue] = useState(\"\");\r\n    const [lastCorrectAddress, setLastCorrectAddress] = useState(\"\");\r\n    const [isInterval, setIsInterval] = useState(false);\r\n    const [intervalId, setIntervalId] = useState();\r\n\r\n    const { setValue, getValues, control } = useFormContext();\r\n\r\n    const { className, type, error, register, errorData, validateProps, setInputValue, setError, customError, inputValue, value, defaultValue, ...otherProps } = props;\r\n\r\n    const dispatch = useDispatch();\r\n    const { address, nameInputActive } = useSelector((state: AppStateType) => state.forms);//data from dadata (correct address)\r\n\r\n    useEffect( () => {\r\n        if(type === \"address\") {\r\n            setLastCorrectAddress(getValues(otherProps.name));\r\n        }\r\n        if(value) {\r\n            setThisValue(value);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(inputValue && inputValue !== \"\") {\r\n            setThisValue(inputValue);\r\n        }\r\n    }, [inputValue])\r\n\r\n    const changeValue = (e: any) => {\r\n        if(otherProps.name === \"val\" && +e.currentTarget.value > 50000) {\r\n            setValue(\"val\", \"50000\");\r\n        }\r\n        if(otherProps.name === \"address-dispatch\" || otherProps.name === \"address-delivery\" ||\r\n            otherProps.name === \"weight\" || otherProps.name === \"val\") {\r\n        }\r\n        if(type === \"address\") {\r\n            let value = e.currentTarget.value;\r\n\r\n            if(type === \"address\") {\r\n                addressControl(value);\r\n            }\r\n            //если функции не  существует, value не зависит от хуков(use state)\r\n            e.currentTarget.value = value;\r\n            setThisValue(value);\r\n        }\r\n        if(setError) {\r\n            dispatch(clearAll());//clear errors from server after ajax\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(type === \"address\") {\r\n            setValue(otherProps.name, lastCorrectAddress);\r\n        }\r\n    }, [lastCorrectAddress])\r\n\r\n    const changeAddress = (correctAddress: string) => {\r\n        setLastCorrectAddress(correctAddress);\r\n    }\r\n\r\n    const addressControl = (value: any) => {\r\n        if(intervalId) {\r\n            clearInterval(intervalId);\r\n        }\r\n        // @ts-ignore\r\n        setIntervalId(setTimeout(getAddresses, 500, value));\r\n        if(isInterval) {\r\n            return;\r\n        }\r\n        setIsInterval(true);\r\n    }\r\n\r\n    const getAddresses = (value: string) => {\r\n        setIsInterval(false);\r\n        dispatch(getCorrectAddress(value, otherProps.name));\r\n    }\r\n\r\n    const clearPromptOfAddress = () => {\r\n        if(type === \"address\") {\r\n            setValue(otherProps.name, lastCorrectAddress);\r\n            dispatch(clearAdressesAction());\r\n        }\r\n    }\r\n\r\n    if(type === \"textarea\") {\r\n        return(\r\n            <>\r\n                <textarea type={otherProps.name === \"password\" ? \"password\" : \"text\"}\r\n                       className={`${className} input ${errorData && errorData[otherProps.name] || setError? \"input_error\" : \"\"}`}\r\n                       {...otherProps}\r\n                    /*for react-hook-form*/\r\n                    // @ts-ignore\r\n                       ref={register && validateProps && !otherProps.disabled? register(validateProps) : register({})}\r\n                    /* for address, name, phone */\r\n                       onChange={(e) => changeValue(e)}\r\n                />\r\n                {errorData && errorData[otherProps.name]? <span className=\"label__error label__error-textarea\">{errorData[otherProps.name].message}</span> : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    if(register) {\r\n        return(\r\n            <>\r\n                {type === \"phone\"?\r\n                    /*<MaskedInput\r\n                        mask=\"+7 999 999-99-99\"\r\n                        onChange={(e) => setThisValue(e.target.value)}\r\n                        value={thisValue? thisValue : getValues(otherProps.name)}\r\n                        name={otherProps.name}\r\n                    >\r\n                        {(inputProps) => (\r\n                        <input type=\"text\"\r\n                               className={`${className} input ${errorData && errorData[otherProps.name] || setError? \"input_error\" : \"\"}`}\r\n                                name={inputProps.name}\r\n                               placeholder={otherProps.placeholder}*/\r\n                            /*for react-hook-form*/\r\n                               //ref={validateProps && !otherProps.disabled? register(validateProps) : register({})}\r\n                            /* for address, name, phone */\r\n                               //defaultValue={inputProps.value}\r\n                       /* />\r\n                        )}\r\n                    </MaskedInput>*/\r\n                        <Controller\r\n                            as={MaskedInput}\r\n                            className={`${className} input ${errorData && errorData[otherProps.name] || setError? \"input_error\" : \"\"}`}\r\n                            control={control}\r\n                            mask=\"+7 999 999-99-99\"\r\n                            defaultValue={thisValue}\r\n                            {...otherProps}\r\n                            rules={validateProps}\r\n                        />\r\n                    :\r\n                    <input type={otherProps.name === \"password\" || type === \"password\" ? \"password\" : \"text\"}\r\n                           className={`${className} input ${errorData && errorData[otherProps.name] || setError? \"input_error\" : \"\"}`}\r\n                           {...otherProps}\r\n                        /*for react-hook-form*/\r\n                           ref={(validateProps && !otherProps.disabled) || type === \"inn\"? register(validateProps) : register({})}\r\n                        /* for address, name, phone */\r\n                           onChange={type !== \"phone\"? (e) => changeValue(e) : () => \"\"}\r\n                           onInput={type === \"phone\"? (e) => changeValue(e) : () => \"\"}\r\n                           onBlur={() => clearPromptOfAddress()}\r\n                           defaultValue={thisValue}\r\n                           readOnly={type === \"date\"}\r\n                    />\r\n                }\r\n\r\n                {errorData && errorData[otherProps.name]? <span className=\"label__error\">{errorData[otherProps.name].message}</span> : \"\"}\r\n                {errorData && !errorData[otherProps.name] && setError? <span className=\"label__error\">{customError? customError.message : \"\"}</span> : \"\"}\r\n                {otherProps.name === nameInputActive ?\r\n                    <div className=\"addresses-prompt\">\r\n                        {address? address.map((a: any, index: number) => {\r\n                            return (\r\n                                <span key={index} className=\"address-prompt\" onMouseDown={() => changeAddress(a)}>{a}</span>\r\n                            );\r\n                        }) : \"\"\r\n                        }\r\n                    </div> : \"\"}\r\n            </>\r\n        );\r\n\r\n    }else {\r\n        if(type === \"address\") {\r\n            return (\r\n                <>\r\n                    <input type=\"text\"\r\n                           className={`${className} input ${errorData && errorData[otherProps.name] || setError ? \"input_error\" : \"\"}`}\r\n                           {...otherProps}\r\n                        /* for address, name, phone */\r\n                           onChange={(e) => changeValue(e)}\r\n                           onBlur={() => clearPromptOfAddress()}\r\n                           value={thisValue}\r\n                    />\r\n                    {otherProps.name === nameInputActive ?\r\n                        <div className=\"addresses-prompt\">\r\n                            {address? address.map((a: any) => {\r\n                                return (\r\n                                    <span className=\"address-prompt\" onMouseDown={() => changeAddress(a)}>{a}</span>\r\n                                );\r\n                            }) : \"\"\r\n                            }\r\n                        </div> : \"\"}\r\n                </>\r\n            );\r\n        }else {\r\n            return (\r\n                <>\r\n                    <input type={otherProps.name === \"password\" ? \"password\" : \"text\"}\r\n                           className={`${className} input`} {...otherProps}/>\r\n                </>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default Input;","C:\\React\\agaev_digital\\express-admin\\src\\components\\utils\\validate\\validate.tsx",["183","184","185","186"],"\r\ntype GetValidatePropsType = (props: {standart: Array<string>, custom: Array<string>}) => ValidateCustomType\r\n\r\n\r\nexport const getValidateProps: GetValidatePropsType = (props) => {\r\n    let propsObj = {};\r\n    propsObj = getObject({...propsObj}, props.standart, \"standart\");\r\n\r\n        propsObj = getObject({...propsObj}, props.custom, \"custom\");\r\n\r\n\r\n    return {...propsObj};\r\n}\r\n\r\nconst getObject = (obj: ValidateCustomType, arr: string[], type: \"standart\" | \"custom\") => {\r\n    if(type === \"custom\") {\r\n        obj.validate = {};\r\n    }\r\n    for (let elem of arr) {\r\n        if(type === \"standart\") {\r\n            // @ts-ignore\r\n            obj[elem] = validateCustom[elem];\r\n        }else {\r\n            // @ts-ignore\r\n            obj[\"validate\"][elem] = validateCustom.validate[elem];\r\n        }\r\n    }\r\n    return {...obj};\r\n}\r\n\r\nexport type ValidateCustomType = {\r\n    required?: {value: boolean, message: string}\r\n    minLength?: {value: number, message: string}\r\n    validate?: {\r\n        isNumber?: (value: number | string) => boolean | string\r\n        isInn?: (value: string) => boolean | string\r\n        isProfileInn?: (value: string) => boolean | string //for change inn in profile page\r\n        isOgrn?: (value: string) => boolean | string\r\n        isProfileOgrn?: (value: string) => boolean | string //for change ogrn in profile page\r\n        profilePhone?: (value: string) => boolean | string\r\n        phone?: (value: string) => boolean | string\r\n        passwordLength?: (value: string) => boolean | string\r\n        passwordProfileLength?: (value: string) => boolean | string\r\n    }\r\n}\r\n\r\nconst validateCustom: ValidateCustomType = {\r\n    required: {\r\n        value: true,\r\n        message: \"Заполните все поля\",\r\n    },\r\n    minLength: {\r\n        value: 8,\r\n        message: \"Минимальная длина 8\",\r\n    },\r\n    validate: {\r\n        isNumber: value => (parseInt(value + \"\") && value > 0) || \"Некорректное значение\",\r\n        isInn: value => value.length === 10 || \"Поле должно иметь 10 символов\",\r\n        isProfileInn: value => value.length === 10 || value.length === 0 || \"Поле должно иметь 10 символов\",\r\n        isOgrn: value => value.length === 13 || \"Поле должно иметь 13 символов\",\r\n        isProfileOgrn: value => value.length === 13 || value.length === 0 || \"Поле должно иметь 13 символов\",\r\n        profilePhone: value => value.match(/\\+7 \\d{3} \\d{3}\\-\\d{2}\\-\\d{2}/) !== null || value.length === 0 || \"Неверно введен номер телефона\",\r\n        phone: value => value.match(/\\+7 \\d{3} \\d{3}\\-\\d{2}\\-\\d{2}/) !== null || \"Неверно введен номер телефона\",\r\n        passwordLength: value => value.length > 5 || \"Длина пароля должна быть не менее 6ти символов\",\r\n        passwordProfileLength: value => value.length > 5 || value.length === 0 || \"Длина пароля должна быть не менее 6ти символов\",\r\n    }\r\n}","C:\\React\\agaev_digital\\express-admin\\src\\components\\Page\\Page.tsx",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\Users\\User\\User.tsx",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\common\\Manage\\Manage.tsx",["187"],"import React from \"react\";\r\nimport c from \"./Manage.module.css\";\r\n\r\ntype PropsType = {\r\n    countPages: number\r\n    currentPage: number\r\n    setCurrentPage: (page: number) => void\r\n}\r\n\r\n// @ts-ignore\r\nconst Manage: React.FC<PropsType> = (props) => {\r\n    const { countPages, currentPage, setCurrentPage } = props;\r\n\r\n    const numbers = [];\r\n\r\n    for(let i = 1; i <= countPages; i++) {\r\n        numbers.push(i);\r\n    }\r\n\r\n    const changeCurrentPage = (page: number) => {\r\n        if(page === 0) {\r\n            return;\r\n        }\r\n        setCurrentPage(page);\r\n    }\r\n\r\n    if(countPages === 0) {\r\n        return \"\";\r\n    }\r\n\r\n    return(\r\n        <div className={c[\"manage-page\"]}>\r\n            <div className={`${c[\"manage-page__left\"]} ${c[\"manage-arrow\"]}`} onClick={() => changeCurrentPage(currentPage <= 1? 0 : currentPage - 1)}>Назад</div>\r\n            <div className={c[\"manage-page__content\"]}>\r\n                {\r\n                    numbers.map((n, index) => {\r\n                        if(n === currentPage) {\r\n                            return <div className={`${c[\"manage-page__numb\"]} ${c[\"manage-page__numb_active\"]}`} key={index}>{n}</div>\r\n                        }\r\n                        if(n === 1 || n === countPages) {\r\n                            return <div className={c[\"manage-page__numb\"]} onClick={() => changeCurrentPage(n)} key={index}>{n}</div>\r\n                        }\r\n                        if(n === currentPage - 1 || n === currentPage + 1) {\r\n                            return <div className={`${c[\"manage-page__numb\"]} ${c[\"manage-page__other\"]}`}\r\n                                        onClick={() => changeCurrentPage(n === currentPage - 1? n - 1 : n + 1)} key={index}>...</div>\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n            <div className={`${c[\"manage-page__right\"]} ${c[\"manage-arrow\"]}`} onClick={() => changeCurrentPage(currentPage >= countPages? 0 : currentPage + 1)}>Вперед</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Manage;","C:\\React\\agaev_digital\\express-admin\\src\\components\\Orders\\Order\\Docs\\Docs.tsx",["188","189"],"import React, {useState} from \"react\";\r\nimport c from \"./Docs.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport Label from \"../../../common/Label/Lable\";\r\nimport Input from \"../../../common/Input/Input\";\r\nimport {FormProvider, useForm} from \"react-hook-form\";\r\nimport Radios from \"../../../common/Radios/Radios\";\r\nimport {deleteFile, getOneOrder, sendFile} from \"../../../redux/order-reducer\";\r\nimport {getValidateProps} from \"../../../utils/validate/validate\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {ParamsType} from \"../Order\";\r\n\r\ntype PropsType = {\r\n    orderId: number\r\n};\r\n\r\nexport type SendFileDataType = {\r\n    file: any\r\n    doc_type: string\r\n    doc_name: string\r\n}\r\n\r\nconst Docs: React.FC<PropsType> = (props) => {\r\n    const [fileInfo, setFileInfo] = useState(null);\r\n    const docs = useSelector((state: AppStateType) => state.orders.currentDocs);\r\n\r\n    const { orderId } = props;\r\n\r\n    const {id} = useParams<ParamsType>();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const methods = useForm({\r\n        shouldFocusError: false\r\n    });\r\n\r\n    const { handleSubmit, register, errors, setValue } = methods;\r\n\r\n    const deleteDoc = async (docId: number) => {\r\n        await dispatch(deleteFile(docId));\r\n        await dispatch(getOneOrder(Number(id)));\r\n    }\r\n\r\n    const sendForm = async (data: SendFileDataType) => {\r\n        console.log(data);\r\n        const sendData = {\r\n            doc_name: data.doc_name,\r\n            doc_type: data.doc_type,\r\n            file: data.file[0],\r\n        }\r\n        await dispatch(sendFile(sendData, orderId));\r\n        await dispatch(getOneOrder(Number(id)));\r\n        await setFileInfo(null);\r\n        await setValue(\"file\", null);\r\n    }\r\n\r\n    const changeInput = (e: any) => {\r\n        const name = e.currentTarget.files[0].name;\r\n        setFileInfo(name);\r\n    }\r\n\r\n    const cancelForm = (e: any) => {\r\n        e.preventDefault();\r\n        setFileInfo(null);\r\n        setValue(\"file\", null);\r\n    }\r\n\r\n    return(\r\n        <div className={c.docs}>\r\n            <div className={c.docs__subtitle + \" title\"}>Документы</div>\r\n            {\r\n                docs && docs.length?\r\n                    <div className={c.docs__window}>\r\n                        <div className={c.docs__top}>\r\n                            <div className={`${c.docs__head} ${c.docs__index}`}>\r\n                                №\r\n                            </div>\r\n                            <div className={`${c.docs__head} ${c.docs__name}`}>\r\n                                Название\r\n                            </div>\r\n                            <div className={`${c.docs__head} ${c.docs__type}`}>\r\n                                Тип\r\n                            </div>\r\n                            <div className={`${c.docs__head} ${c.docs__link}`}>\r\n\r\n                            </div>\r\n                            <div className={`${c.docs__head} ${c.docs__delete}`}>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className={c.docs__main}>\r\n                            {\r\n                                docs.map( (d, index) => {\r\n                                    return(\r\n                                        <div key={index} className={c.docs__row}>\r\n                                            <div className={`${c.docs__td} ${c.docs__index}`}>\r\n                                                {index + 1}\r\n                                            </div>\r\n                                            <div className={`${c.docs__td} ${c.docs__name}`}>\r\n                                                {d.name}\r\n                                            </div>\r\n                                            <div className={`${c.docs__td} ${c.docs__type}`}>\r\n                                                {d.doc_type}\r\n                                            </div>\r\n                                            <div className={`${c.docs__td} ${c.docs__link}`}>\r\n                                                <a className={c.docs__download} href={d.path} target=\"_blank\" download={true}>Скачать</a>\r\n                                            </div>\r\n                                            <div className={`${c.docs__td} ${c.docs__delete}`} onClick={() => deleteDoc(d.id)}>\r\n                                                Удалить\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    : \"Документов нет\"\r\n            }\r\n\r\n                <FormProvider {...methods}>\r\n                    <form className={c.docs__form} onSubmit={handleSubmit(sendForm)}>\r\n                        <input type=\"file\" name=\"file\" id=\"download-doc\" className={c.docs_none}\r\n                               onChange={(e) => changeInput(e)} ref={register}/>\r\n                        {!fileInfo?\r\n                            <>\r\n                                <div className={c.docs__title}>\r\n                                    Загрузить файлы\r\n                                </div>\r\n                                <Label>\r\n                                    <label htmlFor=\"download-doc\" className={c.docs__label}>\r\n                                        Загрузить новый файл\r\n                                    </label>\r\n                                </Label>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <div className={c[\"docs__file-name\"]}>\r\n                                    Загружаемый файл: {fileInfo}\r\n                                </div>\r\n                                <Input className={c.docs__input} name=\"doc_name\" type=\"\"\r\n                                       placeholder=\"Название документа\"\r\n                                       error={true} register={register}\r\n                                       validateProps={getValidateProps({standart: [\"required\"], custom: []})}/>\r\n                                <Radios className={c.docs__radio} name=\"doc_type\" inputs={[\r\n                                    {value: \"Бухгалтерский\", html: \"Бухгалтерский\", afterId: \"buh\", beforeId: \"doc\", register},\r\n                                    {value: \"Иной\", html: \"Иной\", afterId: \"other\", beforeId: \"doc\", register}\r\n                                ]}/>\r\n                                <button className={c.docs__button + \" btn\"}>\r\n                                    Сохранить\r\n                                </button>\r\n                                <button className={c.docs__button + \" btn\"} onClick={(e) => cancelForm(e)}>\r\n                                    Отменить\r\n                                </button>\r\n                            </>\r\n                        }\r\n                    </form>\r\n                </FormProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Docs;","C:\\React\\agaev_digital\\express-admin\\src\\components\\common\\Radios\\Radios.tsx",["190"],"import React, {useEffect, useState} from \"react\";\r\nimport {RegisterType} from \"../Input/Input\";\r\n\r\ntype PropsType = {\r\n    className: string\r\n    name: string\r\n    inputs: Array<{\r\n        beforeId: string\r\n        afterId: string\r\n        value:string\r\n        html: string\r\n        classNameInput?:string\r\n        classNameLabel?: string\r\n        register?: RegisterType\r\n    }>\r\n    setTypeCargo?: (type: string) => void\r\n    disabled?: boolean\r\n    indexValueDefault?: number\r\n}\r\n\r\nconst Radios: React.FC<PropsType> = (props) => {\r\n    const [radioActive, setRadioActive] = useState(0);\r\n\r\n    const { className, inputs, name, setTypeCargo, disabled, indexValueDefault } = props;\r\n\r\n    const changeValue = (index: number, value: string) => {\r\n        setRadioActive(index);\r\n        if(setTypeCargo) {\r\n            setTypeCargo(value);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(indexValueDefault !== undefined && (!isNaN(indexValueDefault))) {\r\n            setRadioActive(indexValueDefault);\r\n        }\r\n    }, [])\r\n\r\n    return(\r\n        <div className={`${className} radios`}>\r\n            {inputs.map( (i, index) => {\r\n                return(\r\n                    <React.Fragment key={index}>\r\n                        {!disabled?\r\n                            <input type=\"radio\" id={`${i.beforeId}-radio-${i.afterId}`}\r\n                                   className={`${i.classNameInput} radio`}\r\n                                   name={name}\r\n                                   value={i.value}\r\n                                   ref={i.register}\r\n                                    defaultChecked={index === radioActive}/> : \"\"\r\n                        }\r\n\r\n                        <label htmlFor={`${i.beforeId}-radio-${i.afterId}`} className={`${i.classNameLabel} label label_radio`} onClick={() => changeValue(index, i.value)}>\r\n                            {i.html}\r\n                        </label>\r\n                    </React.Fragment>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Radios;","C:\\React\\agaev_digital\\express-admin\\src\\components\\Page\\Posibility\\Posibility.tsx",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\Page\\Additional\\Additional.tsx",[],"C:\\React\\agaev_digital\\express-admin\\src\\components\\Page\\Table\\Table.tsx",["191"],"import React, {useEffect, useState} from \"react\";\r\nimport c from \"./Table.module.css\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {DataTableType} from \"../Page\";\r\nimport {useFormContext} from \"react-hook-form\";\r\n\r\nconst Table = () => {\r\n    const [table, setTable] = useState<null | DataTableType>(null);\r\n\r\n    const { register } = useFormContext();\r\n\r\n    const tableData = useSelector((state: AppStateType) => state.page.table);\r\n\r\n    useEffect(() => {\r\n        setTable(tableData);\r\n    }, [tableData]);\r\n\r\n    const addRow = () => {\r\n        setTable(table? {\r\n            title: table.title,\r\n            head: [...table.head, \"\"],\r\n            body: table.body.map((arr) => [...arr, \"\"]),\r\n        } : null);\r\n    }\r\n\r\n    const deleteRow = (rowIndex: number) => {\r\n        setTable(table? {\r\n            title: table.title,\r\n            head: table.head,\r\n            body: table.body.filter((row, index) => index !== rowIndex),\r\n        } : null);\r\n    }\r\n\r\n    const addColumn = () => {\r\n        setTable(table? {\r\n            title: table.title,\r\n            head: table.head,\r\n            body: [...table.body, Array.from(table.head, (row) => \"\")],\r\n        } : null);\r\n    }\r\n\r\n    const deleteColumn = (columnIndex: number) => {\r\n        setTable(table? {\r\n            title: table.title,\r\n            head: table.head.filter((h, index) => index !== columnIndex),\r\n            body: table.body.map((arr, index) => arr.filter((str, strIndex) => strIndex !== (arr.length - 1) )),\r\n        } : null);\r\n    }\r\n\r\n    const moveUp = (rowIndex: number) => {\r\n        setTable(table? {\r\n            title: table.title,\r\n            head: table.head,\r\n            body: table.body.map((arr, index) => {\r\n                if(index === rowIndex) {\r\n                    return table.body[rowIndex - 1];\r\n                }\r\n                if(index === rowIndex - 1) {\r\n                    return table.body[rowIndex];\r\n                }\r\n                return arr;\r\n            } ),\r\n        } : null);\r\n    }\r\n\r\n    const moveDown = (rowIndex: number) => {\r\n        setTable(table? {\r\n            title: table.title,\r\n            head: table.head,\r\n            body: table.body.map((arr, index) => {\r\n                if(index === rowIndex) {\r\n                    return table.body[rowIndex + 1];\r\n                }\r\n                if(index === rowIndex + 1) {\r\n                    return table.body[rowIndex];\r\n                }\r\n                return arr;\r\n            } ),\r\n        } : null);\r\n    }\r\n\r\n    const moveRight = (columnIndex: number) => {\r\n        setTable(table? {\r\n            title: table.title,\r\n            head: table.head.map((h, index) => {\r\n                if(columnIndex === index) {\r\n                    return table.head[columnIndex + 1];\r\n                }\r\n                if(index === columnIndex + 1) {\r\n                    return table.head[columnIndex];\r\n                }\r\n                return h;\r\n            }),\r\n            body: table.body.map((arr, index) => {\r\n                return arr.map((str, strIndex) => {\r\n                    if(columnIndex === strIndex) {\r\n                        return arr[strIndex + 1];\r\n                    }\r\n                    if(strIndex === columnIndex + 1) {\r\n                        return arr[columnIndex];\r\n                    }\r\n                    return str;\r\n                })\r\n            } ),\r\n        } : null);\r\n    }\r\n\r\n    const moveLeft = (columnIndex: number) => {\r\n        setTable(table? {\r\n            title: table.title,\r\n            head: table.head.map((h, index) => {\r\n                if(columnIndex === index) {\r\n                    return table.head[columnIndex - 1];\r\n                }\r\n                if(index === columnIndex - 1) {\r\n                    return table.head[columnIndex];\r\n                }\r\n                return h;\r\n            }),\r\n            body: table.body.map((arr, index) => {\r\n                return arr.map((str, strIndex) => {\r\n                    if(columnIndex === strIndex) {\r\n                        return arr[strIndex - 1];\r\n                    }\r\n                    if(strIndex === columnIndex - 1) {\r\n                        return arr[columnIndex];\r\n                    }\r\n                    return str;\r\n                })\r\n                return arr;\r\n            } ),\r\n        } : null);\r\n    }\r\n\r\n    const changeInput = (indexBlock: number, isTitle: boolean, isSubtitle: boolean, e: any, indexTd = 0,) => {\r\n        const value = e.currentTarget.value;\r\n        setTable(table? {\r\n            title: isTitle? value : table.title,\r\n            head: isSubtitle? table.head.map((h, index) => index === indexBlock? value : h) : table.head,\r\n            body: isTitle || isSubtitle? table.body : table.body.map((arr, arrIndex) => {\r\n                if(arrIndex === indexBlock) {\r\n                    return arr.map((str, strIndex) => strIndex === indexTd? value : str);\r\n                }\r\n                return arr;\r\n            }),\r\n        } : null);\r\n    }\r\n\r\n    return(\r\n        <div className={c.table}>\r\n            <div className={c.table__title}>\r\n                Изменение таблицы\r\n            </div>\r\n            <div className={c.table__subtitle}>\r\n                <input name=\"table_title\" ref={register} value={table?.title} className={c.table__input + \" input\"}\r\n                       onChange={(e) => changeInput(0, true, false, e)}/>\r\n            </div>\r\n            <table className={c.table__table}>\r\n                <thead>\r\n                <tr>\r\n                    {\r\n                        table?.head?.map((h, index) => {\r\n                            return <th key={index}><input ref={register} className={c.table__td + \" input\"} name={\"th-\" + index} value={h}\r\n                                            onChange={(e) => changeInput(index, false, true, e)}/>\r\n                                <input type=\"hidden\" ref={register} name=\"column_count\" value={table?.head.length}/></th>;\r\n                        })\r\n                    }\r\n                    <td className={`${c.table__add} btn`}\r\n                            onClick={addRow}>\r\n                        Добавить\r\n                    </td>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    table?.body?.map((row, rowIndex) => {\r\n                        return(\r\n                            <tr key={rowIndex}>\r\n                                {\r\n                                    row.map((td, tdIndex) => {\r\n                                        return <td key={tdIndex}><input ref={register} className={c.table__td + \" input\"} name={\"td-\" + rowIndex + \"-\" + tdIndex} value={td}\r\n                                                                    onChange={(e) => changeInput(rowIndex, false, false, e, tdIndex)}/><input\r\n                                            type=\"hidden\" ref={register} name=\"row_count\" value={table?.body.length}/></td>;\r\n                                    })\r\n                                }\r\n                                <td className={c.table__right}>\r\n                                    <span className={`${c.table__delete} btn`}\r\n                                            onClick={(e) => deleteRow(rowIndex)}>\r\n                                        Удалить\r\n                                    </span>\r\n                                    <div className={c.table__move}>\r\n                                        {\r\n                                            rowIndex > 0 ?\r\n                                                <div className={`${c.table__up} ${c.table__direction}`}\r\n                                                     onClick={() => moveUp(rowIndex)}>\r\n                                                    &uarr;\r\n                                                </div> : \"\"\r\n                                        }\r\n                                        {\r\n                                            rowIndex < table.body.length - 1 ?\r\n                                                <div className={`${c.table__down} ${c.table__direction}`}\r\n                                                     onClick={() => moveDown(rowIndex)}>\r\n                                                    &darr;\r\n                                                </div> : \"\"\r\n                                        }\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    })\r\n                }\r\n                <tr>\r\n                    {\r\n                        table?.head?.map((d, index) => {\r\n                            if(index > 0) {\r\n                                return (\r\n                                    <td key={index}>\r\n                                        <span className={c.table__delete + \" btn\"} onClick={(e) => deleteColumn(index)}>Удалить</span>\r\n                                        <div className={c.table__bot}>\r\n                                            {\r\n                                                index > 1 ?\r\n                                                    <div className={`${c.table__up} ${c.table__direction}`}\r\n                                                         onClick={() => moveLeft(index)}>\r\n                                                        &#8592;\r\n                                                    </div> : \"\"\r\n                                            }\r\n                                            {\r\n                                                index < table.head.length - 1?\r\n                                                    <div className={`${c.table__down} ${c.table__direction}`}\r\n                                                         onClick={() => moveRight(index)}>\r\n                                                        &#8594;\r\n                                                    </div> : \"\"\r\n                                            }\r\n                                        </div>\r\n                                    </td>\r\n                                );\r\n                            }else {\r\n                                return (\r\n                                    <td key={index} className={c.table__irregular}>\r\n                                        <span className={`${c.table__add} btn`} onClick={addColumn}>Добавить</span>\r\n                                    </td>\r\n                                );\r\n                            }\r\n\r\n                        })\r\n                    }\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;",{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":18,"column":8,"nodeType":"198","endLine":18,"endColumn":10,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":1,"column":43,"nodeType":"202","messageId":"203","endLine":1,"endColumn":50},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"204","line":35,"column":8,"nodeType":"198","endLine":35,"endColumn":20,"suggestions":"205"},{"ruleId":"200","severity":1,"message":"206","line":10,"column":7,"nodeType":"202","messageId":"203","endLine":10,"endColumn":14},{"ruleId":"200","severity":1,"message":"207","line":11,"column":7,"nodeType":"202","messageId":"203","endLine":11,"endColumn":17},{"ruleId":"200","severity":1,"message":"208","line":12,"column":7,"nodeType":"202","messageId":"203","endLine":12,"endColumn":17},{"ruleId":"200","severity":1,"message":"209","line":13,"column":7,"nodeType":"202","messageId":"203","endLine":13,"endColumn":20},{"ruleId":"200","severity":1,"message":"210","line":4,"column":21,"nodeType":"202","messageId":"203","endLine":4,"endColumn":29},{"ruleId":"196","severity":1,"message":"211","line":20,"column":8,"nodeType":"198","endLine":20,"endColumn":10,"suggestions":"212"},{"ruleId":"200","severity":1,"message":"213","line":13,"column":12,"nodeType":"202","messageId":"203","endLine":13,"endColumn":14},{"ruleId":"200","severity":1,"message":"214","line":12,"column":9,"nodeType":"202","messageId":"203","endLine":12,"endColumn":34},{"ruleId":"200","severity":1,"message":"215","line":20,"column":26,"nodeType":"202","messageId":"203","endLine":20,"endColumn":41},{"ruleId":"196","severity":1,"message":"216","line":30,"column":8,"nodeType":"198","endLine":30,"endColumn":10,"suggestions":"217"},{"ruleId":"196","severity":1,"message":"218","line":34,"column":8,"nodeType":"198","endLine":34,"endColumn":29,"suggestions":"219"},{"ruleId":"196","severity":1,"message":"220","line":38,"column":8,"nodeType":"198","endLine":38,"endColumn":52,"suggestions":"221"},{"ruleId":"200","severity":1,"message":"222","line":24,"column":18,"nodeType":"202","messageId":"203","endLine":24,"endColumn":23},{"ruleId":"196","severity":1,"message":"223","line":40,"column":8,"nodeType":"198","endLine":40,"endColumn":10,"suggestions":"224"},{"ruleId":"200","severity":1,"message":"225","line":14,"column":12,"nodeType":"202","messageId":"203","endLine":14,"endColumn":23},{"ruleId":"200","severity":1,"message":"226","line":14,"column":25,"nodeType":"202","messageId":"203","endLine":14,"endColumn":39},{"ruleId":"196","severity":1,"message":"227","line":25,"column":8,"nodeType":"198","endLine":25,"endColumn":10,"suggestions":"228"},{"ruleId":"196","severity":1,"message":"218","line":29,"column":8,"nodeType":"198","endLine":29,"endColumn":29,"suggestions":"229"},{"ruleId":"196","severity":1,"message":"218","line":35,"column":8,"nodeType":"198","endLine":35,"endColumn":16,"suggestions":"230"},{"ruleId":"196","severity":1,"message":"227","line":42,"column":8,"nodeType":"198","endLine":42,"endColumn":23,"suggestions":"231"},{"ruleId":"200","severity":1,"message":"232","line":2,"column":10,"nodeType":"202","messageId":"203","endLine":2,"endColumn":28},{"ruleId":"196","severity":1,"message":"233","line":69,"column":8,"nodeType":"198","endLine":69,"endColumn":10,"suggestions":"234"},{"ruleId":"196","severity":1,"message":"235","line":103,"column":8,"nodeType":"198","endLine":103,"endColumn":28,"suggestions":"236"},{"ruleId":"237","severity":1,"message":"238","line":137,"column":67,"nodeType":"239","messageId":"240","endLine":137,"endColumn":69},{"ruleId":"237","severity":1,"message":"238","line":137,"column":97,"nodeType":"239","messageId":"240","endLine":137,"endColumn":99},{"ruleId":"237","severity":1,"message":"238","line":174,"column":72,"nodeType":"239","messageId":"240","endLine":174,"endColumn":74},{"ruleId":"237","severity":1,"message":"238","line":174,"column":102,"nodeType":"239","messageId":"240","endLine":174,"endColumn":104},{"ruleId":"237","severity":1,"message":"238","line":183,"column":71,"nodeType":"239","messageId":"240","endLine":183,"endColumn":73},{"ruleId":"237","severity":1,"message":"238","line":183,"column":101,"nodeType":"239","messageId":"240","endLine":183,"endColumn":103},{"ruleId":"237","severity":1,"message":"238","line":215,"column":71,"nodeType":"239","messageId":"240","endLine":215,"endColumn":73},{"ruleId":"237","severity":1,"message":"238","line":215,"column":101,"nodeType":"239","messageId":"240","endLine":215,"endColumn":103},{"ruleId":"241","severity":1,"message":"242","line":62,"column":60,"nodeType":"243","messageId":"244","endLine":62,"endColumn":61,"suggestions":"245"},{"ruleId":"241","severity":1,"message":"242","line":62,"column":67,"nodeType":"243","messageId":"244","endLine":62,"endColumn":68,"suggestions":"246"},{"ruleId":"241","severity":1,"message":"242","line":63,"column":53,"nodeType":"243","messageId":"244","endLine":63,"endColumn":54,"suggestions":"247"},{"ruleId":"241","severity":1,"message":"242","line":63,"column":60,"nodeType":"243","messageId":"244","endLine":63,"endColumn":61,"suggestions":"248"},{"ruleId":"249","severity":1,"message":"250","line":36,"column":44,"nodeType":"251","messageId":"252","endLine":36,"endColumn":46},{"ruleId":"200","severity":1,"message":"253","line":38,"column":37,"nodeType":"202","messageId":"203","endLine":38,"endColumn":43},{"ruleId":"254","severity":1,"message":"255","line":107,"column":49,"nodeType":"256","endLine":107,"endColumn":127},{"ruleId":"196","severity":1,"message":"257","line":37,"column":8,"nodeType":"198","endLine":37,"endColumn":10,"suggestions":"258"},{"ruleId":"259","severity":1,"message":"260","line":131,"column":17,"nodeType":"261","messageId":"262","endLine":131,"endColumn":28},"no-native-reassign",["263"],"no-negated-in-lhs",["264"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["265"],"@typescript-eslint/no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'dispatch' and 'setError'. Either include them or remove the dependency array.",["266"],"'ADD_ROW' is assigned a value but never used.","'ADD_COLUMN' is assigned a value but never used.","'DELETE_ROW' is assigned a value but never used.","'DELETE_COLUMN' is assigned a value but never used.","'UserType' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["267"],"'id' is assigned a value but never used.","'setCurrentPageOrderAction' is defined but never used.","'setSearchFilter' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'countNeed', 'currentPage', and 'dispatch'. Either include them or remove the dependency array.",["268"],"React Hook useEffect has a missing dependency: 'changeCurrentPage'. Either include it or remove the dependency array.",["269"],"React Hook useEffect has a missing dependency: 'changeFilter'. Either include it or remove the dependency array.",["270"],"'index' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'id', and 'info'. Either include them or remove the dependency array.",["271"],"'userIdState' is assigned a value but never used.","'setUserIdState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getOrdersWithFilters'. Either include it or remove the dependency array.",["272"],["273"],["274"],["275"],"'ValidateCustomType' is defined but never used.","React Hook useEffect has missing dependencies: 'getValues', 'otherProps.name', 'type', and 'value'. Either include them or remove the dependency array.",["276"],"React Hook useEffect has missing dependencies: 'otherProps.name', 'setValue', and 'type'. Either include them or remove the dependency array.",["277"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["278","279"],["280","281"],["282","283"],["284","285"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'errors' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","React Hook useEffect has a missing dependency: 'indexValueDefault'. Either include it or remove the dependency array.",["286"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-global-assign","no-unsafe-negation",{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"295","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"messageId":"312","fix":"313","desc":"314"},{"messageId":"315","fix":"316","desc":"317"},{"messageId":"312","fix":"318","desc":"314"},{"messageId":"315","fix":"319","desc":"317"},{"messageId":"312","fix":"320","desc":"314"},{"messageId":"315","fix":"321","desc":"317"},{"messageId":"312","fix":"322","desc":"314"},{"messageId":"315","fix":"323","desc":"317"},{"desc":"324","fix":"325"},"Update the dependencies array to be: [dispatch]",{"range":"326","text":"327"},"Update the dependencies array to be: [dispatch, loginError, setError]",{"range":"328","text":"329"},"Update the dependencies array to be: [dispatch, id]",{"range":"330","text":"331"},"Update the dependencies array to be: [countNeed, currentPage, dispatch]",{"range":"332","text":"333"},"Update the dependencies array to be: [changeCurrentPage, currentPageOfManage]",{"range":"334","text":"335"},"Update the dependencies array to be: [nameFilter, dateCreateFilter, searchFilter, changeFilter]",{"range":"336","text":"337"},"Update the dependencies array to be: [dispatch, id, info]",{"range":"338","text":"339"},"Update the dependencies array to be: [getOrdersWithFilters]",{"range":"340","text":"341"},{"range":"342","text":"335"},"Update the dependencies array to be: [changeCurrentPage, userId]",{"range":"343","text":"344"},"Update the dependencies array to be: [getOrdersWithFilters, toNeedRefresh]",{"range":"345","text":"346"},"Update the dependencies array to be: [getValues, otherProps.name, type, value]",{"range":"347","text":"348"},"Update the dependencies array to be: [lastCorrectAddress, otherProps.name, setValue, type]",{"range":"349","text":"350"},"removeEscape",{"range":"351","text":"352"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"353","text":"354"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"355","text":"352"},{"range":"356","text":"354"},{"range":"357","text":"352"},{"range":"358","text":"354"},{"range":"359","text":"352"},{"range":"360","text":"354"},"Update the dependencies array to be: [indexValueDefault]",{"range":"361","text":"362"},[628,630],"[dispatch]",[1266,1278],"[dispatch, loginError, setError]",[664,666],"[dispatch, id]",[1223,1225],"[countNeed, currentPage, dispatch]",[1290,1311],"[changeCurrentPage, currentPageOfManage]",[1371,1415],"[nameFilter, dateCreateFilter, searchFilter, changeFilter]",[1203,1205],"[dispatch, id, info]",[928,930],"[getOrdersWithFilters]",[995,1016],[1118,1126],"[changeCurrentPage, userId]",[1276,1291],"[getOrdersWithFilters, toNeedRefresh]",[2375,2377],"[getValues, otherProps.name, type, value]",[3469,3489],"[lastCorrectAddress, otherProps.name, setValue, type]",[2379,2380],"",[2379,2379],"\\",[2386,2387],[2386,2386],[2516,2517],[2516,2516],[2523,2524],[2523,2523],[1029,1031],"[indexValueDefault]"]