[{"D:\\react\\admin-e\\src\\index.js":"1","D:\\react\\admin-e\\src\\App.js":"2","D:\\react\\admin-e\\src\\reportWebVitals.js":"3","D:\\react\\admin-e\\src\\components\\redux\\redux-store.ts":"4","D:\\react\\admin-e\\src\\components\\redux\\app-reducer.ts":"5","D:\\react\\admin-e\\src\\components\\Auth\\Auth.tsx":"6","D:\\react\\admin-e\\src\\components\\Spinner\\Spinner.tsx":"7","D:\\react\\admin-e\\src\\components\\Sidebar\\Sidebar.tsx":"8","D:\\react\\admin-e\\src\\components\\Content\\Content.tsx":"9","D:\\react\\admin-e\\src\\components\\redux\\user-reducer.ts":"10","D:\\react\\admin-e\\src\\components\\redux\\profile-reducer.ts":"11","D:\\react\\admin-e\\src\\components\\redux\\order-reducer.ts":"12","D:\\react\\admin-e\\src\\components\\redux\\form-reducer.ts":"13","D:\\react\\admin-e\\src\\components\\redux\\errors-reducer.tsx":"14","D:\\react\\admin-e\\src\\components\\API\\API.ts":"15","D:\\react\\admin-e\\src\\components\\Orders\\Orders.tsx":"16","D:\\react\\admin-e\\src\\components\\Users\\Users.tsx":"17","D:\\react\\admin-e\\src\\components\\Info\\Info.tsx":"18","D:\\react\\admin-e\\src\\components\\Main\\Main.tsx":"19","D:\\react\\admin-e\\src\\components\\Page\\Page.tsx":"20","D:\\react\\admin-e\\src\\components\\utils\\validate\\validate.tsx":"21","D:\\react\\admin-e\\src\\components\\Orders\\Order\\Order.tsx":"22","D:\\react\\admin-e\\src\\components\\common\\Label\\Lable.tsx":"23","D:\\react\\admin-e\\src\\components\\common\\Input\\Input.tsx":"24","D:\\react\\admin-e\\src\\components\\Users\\User\\User.tsx":"25","D:\\react\\admin-e\\src\\components\\common\\Manage\\Manage.tsx":"26","D:\\react\\admin-e\\src\\components\\Orders\\Order\\Docs\\Docs.tsx":"27","D:\\react\\admin-e\\src\\components\\common\\Radios\\Radios.tsx":"28","D:\\react\\admin-e\\src\\components\\redux\\page-reducer.ts":"29"},{"size":615,"mtime":1611290426915,"results":"30","hashOfConfig":"31"},{"size":1034,"mtime":1611291134634,"results":"32","hashOfConfig":"31"},{"size":375,"mtime":1611290426915,"results":"33","hashOfConfig":"31"},{"size":986,"mtime":1611293420902,"results":"34","hashOfConfig":"31"},{"size":2323,"mtime":1611291102312,"results":"35","hashOfConfig":"31"},{"size":2726,"mtime":1611290426887,"results":"36","hashOfConfig":"31"},{"size":398,"mtime":1611290426901,"results":"37","hashOfConfig":"31"},{"size":1415,"mtime":1611290426900,"results":"38","hashOfConfig":"31"},{"size":959,"mtime":1611290426888,"results":"39","hashOfConfig":"31"},{"size":6317,"mtime":1611290426913,"results":"40","hashOfConfig":"31"},{"size":2407,"mtime":1611290426912,"results":"41","hashOfConfig":"31"},{"size":8641,"mtime":1611290426912,"results":"42","hashOfConfig":"31"},{"size":3411,"mtime":1611290426911,"results":"43","hashOfConfig":"31"},{"size":3465,"mtime":1611290426911,"results":"44","hashOfConfig":"31"},{"size":2930,"mtime":1611291038944,"results":"45","hashOfConfig":"31"},{"size":2131,"mtime":1611290426896,"results":"46","hashOfConfig":"31"},{"size":3741,"mtime":1611290426905,"results":"47","hashOfConfig":"31"},{"size":2418,"mtime":1611290426890,"results":"48","hashOfConfig":"31"},{"size":3465,"mtime":1611290426891,"results":"49","hashOfConfig":"31"},{"size":5748,"mtime":1611298196762,"results":"50","hashOfConfig":"31"},{"size":3096,"mtime":1611290426914,"results":"51","hashOfConfig":"31"},{"size":5990,"mtime":1611290426895,"results":"52","hashOfConfig":"31"},{"size":358,"mtime":1611290426907,"results":"53","hashOfConfig":"31"},{"size":9951,"mtime":1611290426906,"results":"54","hashOfConfig":"31"},{"size":2894,"mtime":1611290426903,"results":"55","hashOfConfig":"31"},{"size":2056,"mtime":1611290426909,"results":"56","hashOfConfig":"31"},{"size":7297,"mtime":1611290426894,"results":"57","hashOfConfig":"31"},{"size":2055,"mtime":1611290426910,"results":"58","hashOfConfig":"31"},{"size":3620,"mtime":1611297669866,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"dpi3d9",{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"71"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"71"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"71"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"71"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"71"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"71"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"71"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"71"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"71"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"71"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"71"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"71"},"D:\\react\\admin-e\\src\\index.js",[],["134","135"],"D:\\react\\admin-e\\src\\App.js",["136","137"],"import React, {useEffect} from \"react\";\r\nimport './App.css';\r\nimport Sidebar from \"./components/Sidebar/Sidebar\";\r\nimport Content from \"./components/Content/Content\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Auth from \"./components/Auth/Auth\";\r\nimport Spinner from \"./components/Spinner/Spinner\";\r\nimport {checkUser} from \"./components/redux/app-reducer\";\r\n\r\nfunction App() {\r\n    const { isReady, isAjax, isAuth } = useSelector( (state) => state.app);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(checkUser());\r\n    }, [])\r\n\r\n    if(!isReady) {\r\n        return <Spinner isWhite={true} />\r\n    }\r\n\r\n    if(!isAuth) {\r\n        //return <Auth />\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <BrowserRouter>\r\n                {isAjax? <Spinner isWhite={false} /> : \"\"}\r\n                <Sidebar/>\r\n                <Content/>\r\n            </BrowserRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","D:\\react\\admin-e\\src\\reportWebVitals.js",[],"D:\\react\\admin-e\\src\\components\\redux\\redux-store.ts",["138"],"import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleWare from \"redux-thunk\";\r\nimport appReducer from \"./app-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport userReducer from \"./user-reducer\";\r\nimport errorsReducer from \"./errors-reducer\";\r\nimport formReducer from \"./form-reducer\";\r\nimport orderReducer from \"./order-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport pageReducer from \"./page-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    app: appReducer,\r\n    profile: profileReducer,\r\n    user: userReducer,\r\n    errors: errorsReducer,\r\n    forms: formReducer,\r\n    orders: orderReducer,\r\n    page: pageReducer,\r\n});\r\n\r\nconst initialState = {};\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleWare)));\r\n\r\nexport default store;",["139","140"],"D:\\react\\admin-e\\src\\components\\redux\\app-reducer.ts",[],"D:\\react\\admin-e\\src\\components\\Auth\\Auth.tsx",["141"],"import React, {useEffect} from \"react\";\r\nimport c from \"./Auth.module.css\";\r\nimport Label from \"../common/Label/Lable\";\r\nimport Input from \"../common/Input/Input\";\r\nimport {FormProvider, useForm} from \"react-hook-form\";\r\nimport {getValidateProps} from \"../utils/validate/validate\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {setLoginErrorAction} from \"../redux/form-reducer\";\r\nimport {LoginType, loginUser} from \"../redux/profile-reducer\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\n\r\nconst Auth = () => {\r\n    const methods = useForm({\r\n        shouldFocusError: false,\r\n    });\r\n\r\n    const { register, handleSubmit, errors, setError } = methods;\r\n\r\n    const isAjax= useSelector((state: AppStateType) => state.app.isAjax);\r\n\r\n    const { loginError } = useSelector((state:AppStateType) => state.forms);\r\n    const dispatch = useDispatch();\r\n\r\n    const sendForm = (data: LoginType) => {\r\n        dispatch(loginUser(data));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(loginError) {\r\n            setError(\"email\", {type: \"maniual\", message: \"\"});\r\n            setError(\"password\", {type: \"maniual\", message: loginError});\r\n            dispatch(setLoginErrorAction(null));\r\n        }\r\n    }, [loginError])\r\n\r\n    return (\r\n\r\n        <div className={c.auth}>\r\n            {isAjax? <Spinner isWhite={false} /> : \"\"}\r\n            <div className={c.auth__window}>\r\n                <div className={c.auth__title}>\r\n                    Вход в админ панель\r\n                </div>\r\n                <FormProvider {...methods}>\r\n                    <form className={c.auth__form} onSubmit={handleSubmit(sendForm)}>\r\n                        <Label>\r\n                            <Input className={c.auth__input} name=\"email\" type=\"email\" placeholder=\"email\"\r\n                                   error={true} register={register} errorData={errors}\r\n                                   validateProps={getValidateProps({standart: [\"required\"], custom: []})}/>\r\n                        </Label>\r\n                        <Label>\r\n                            <Input className={c.auth__input} name=\"password\" type=\"password\" placeholder=\"password\"\r\n                                   error={true} register={register} errorData={errors}\r\n                                   validateProps={getValidateProps({standart: [\"required\"], custom: []})}/>\r\n                        </Label>\r\n                        <button className={c.auth__button + \" btn\"}>\r\n                            Войти\r\n                        </button>\r\n                    </form>\r\n                </FormProvider>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Auth;","D:\\react\\admin-e\\src\\components\\Spinner\\Spinner.tsx",[],"D:\\react\\admin-e\\src\\components\\Sidebar\\Sidebar.tsx",[],"D:\\react\\admin-e\\src\\components\\Content\\Content.tsx",[],"D:\\react\\admin-e\\src\\components\\redux\\user-reducer.ts",[],"D:\\react\\admin-e\\src\\components\\redux\\profile-reducer.ts",[],"D:\\react\\admin-e\\src\\components\\redux\\order-reducer.ts",[],"D:\\react\\admin-e\\src\\components\\redux\\form-reducer.ts",[],"D:\\react\\admin-e\\src\\components\\redux\\errors-reducer.tsx",[],"D:\\react\\admin-e\\src\\components\\API\\API.ts",[],"D:\\react\\admin-e\\src\\components\\Orders\\Orders.tsx",["142","143","144","145","146"],"import React, {useEffect, useState} from \"react\";\r\nimport c from \"./Orders.module.css\";\r\nimport Order from \"./Order/Order\";\r\nimport {getOrders, setCurrentPageOrderAction} from \"../redux/order-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport Manage from \"../common/Manage/Manage\";\r\n\r\ntype PropsType = {\r\n    userId: number | null\r\n}\r\n\r\nconst Orders: React.FC<PropsType> = (props) => {\r\n    const [userIdState, setUserIdState] = useState(null);\r\n    const { currentPage, countPages, countNeed, orders, countOrders } = useSelector((state: AppStateType) => state.orders);\r\n    const [currentPageOfManage, setCurrentPageOfManage] = useState(currentPage);\r\n\r\n    const { userId } = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        getOrdersWithFilters();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        changeCurrentPage();\r\n    }, [currentPageOfManage])\r\n\r\n    useEffect(() => {\r\n        if(userId) {\r\n            changeCurrentPage();\r\n        }\r\n    }, [userId])\r\n\r\n    const changeCurrentPage = async () => {\r\n        await dispatch(setCurrentPageOrderAction(currentPageOfManage));\r\n        await getOrdersWithFilters();\r\n    }\r\n\r\n    const getOrdersWithFilters = (searchFilter = null, name = null, dateCreate = null) => {\r\n        dispatch(getOrders({searchFilter, name, dateCreate, currentPage: currentPageOfManage, countNeed, userId}));\r\n    }\r\n\r\n    return(\r\n        <div className={c.orders}>\r\n            <div className={c.orders__title + \" title\"}>\r\n                Все заказы\r\n            </div>\r\n            <div className={c.orders__count}>\r\n                Количество заказов: {countOrders}\r\n            </div>\r\n            {\r\n                orders? orders.map((o, index) => {\r\n                    return <Order type=\"list\" info={o} index={index}/>\r\n                }) : \"\"\r\n            }\r\n            <Manage countPages={countPages} currentPage={currentPage}\r\n                    setCurrentPage={(page) => setCurrentPageOfManage(page)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Orders;","D:\\react\\admin-e\\src\\components\\Users\\Users.tsx",["147","148","149","150","151"],"import React, {useEffect, useState} from \"react\";\r\nimport c from \"./Users.module.css\";\r\nimport User from \"./User/User\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {\r\n    getUsers,\r\n    setCurrentPageUserAction,\r\n    setDateCreateFilterUserAction, setNameFilterUserAction,\r\n    setSearchFilterUserAction\r\n} from \"../redux/user-reducer\";\r\nimport {setCurrentPageOrderAction} from \"../redux/order-reducer\";\r\nimport Manage from \"../common/Manage/Manage\";\r\n\r\ntype PropsType = any\r\n\r\nconst Users: React.FC<PropsType> = (props) => {\r\n    const [nameFilter, setNameFilter] = useState<null | \"asc\" | \"desc\">(null);\r\n    const [dateCreateFilter, setDateCreateFilter] = useState<null | \"asc\" | \"desc\">(null);\r\n    const [searchFilter, setSearchFilter] = useState(null);\r\n\r\n    const { currentPage, countPages, countNeed, users, countUsers, filters } = useSelector((state: AppStateType) => state.user);\r\n\r\n    const [currentPageOfManage, setCurrentPageOfManage] = useState(currentPage);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsers({searchFilter: null, name: null, dateCreate: null, currentPage, countNeed}));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        changeCurrentPage();\r\n    }, [currentPageOfManage])\r\n\r\n    useEffect(() => {\r\n        changeFilter();\r\n    }, [nameFilter, dateCreateFilter, searchFilter]);\r\n\r\n    const changeFilter = async () => {\r\n        await dispatch(setNameFilterUserAction(nameFilter));\r\n        await dispatch(setDateCreateFilterUserAction(dateCreateFilter));\r\n        await dispatch(setSearchFilterUserAction(searchFilter));\r\n        await changeCurrentPage();\r\n    }\r\n\r\n    const changeCurrentPage = async () => {\r\n        await dispatch(setCurrentPageUserAction(currentPageOfManage));\r\n        await dispatch(getUsers({searchFilter: filters.searchFilter, name: filters.name, dateCreate: filters.dateCreate, currentPage, countNeed}));\r\n    }\r\n\r\n    const changeNameFilter = () => {\r\n        if(!nameFilter || nameFilter === \"desc\") {\r\n            setNameFilter(\"asc\");\r\n        }else {\r\n            setNameFilter(\"desc\");\r\n        }\r\n    }\r\n\r\n    const changeDateCreateFilter = () => {\r\n        if(!dateCreateFilter || dateCreateFilter === \"desc\") {\r\n            setDateCreateFilter(\"asc\");\r\n        }else {\r\n            setDateCreateFilter(\"desc\");\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className={c.users}>\r\n            <div className={c.users__title + \" title\"}>\r\n                Список всех пользователей\r\n            </div>\r\n            <div className={c.users__count}>\r\n                Найдено пользователей: {countUsers}\r\n            </div>\r\n            <div className={c.users__filters}>\r\n                <div className={c.users__minititle}>Сортировка</div>\r\n                <div className={c.users__list}>\r\n                    <div className={c.users__name} onClick={changeNameFilter}>\r\n                        По имени\r\n                    </div>\r\n                    <div className={c.users__create} onClick={changeDateCreateFilter}>\r\n                        По дате регистрации\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={c.users__content}>\r\n                {\r\n                    users? users.map((u, index) => {\r\n                        return <User data={u} index={index}/>\r\n                    }) : \"\"\r\n                }\r\n\r\n            </div>\r\n            <Manage countPages={countPages} currentPage={currentPage}\r\n                    setCurrentPage={(page) => setCurrentPageOfManage(page)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;","D:\\react\\admin-e\\src\\components\\Info\\Info.tsx",["152","153"],"import React, {useEffect} from \"react\";\r\nimport c from \"./Info.module.css\";\r\nimport Orders from \"../Orders/Orders\";\r\nimport {getOneUser, UserType} from \"../redux/user-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {NavLink, useParams} from \"react-router-dom\";\r\nimport {ParamsType} from \"../Orders/Order/Order\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nconst Info = () => {\r\n\r\n    const { id } = useParams<ParamsType>();\r\n\r\n    const currentUser = useSelector((state: AppStateType) => state.user.currentUser);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getOneUser(Number(id)));\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={c.info}>\r\n            <div className={c.info__title + \" title\"}>\r\n                Пользователь: Иванов Иван Иванович\r\n            </div>\r\n            <NavLink to=\"/users\" className={c.info__back + \" btn\"}>\r\n                Назад\r\n            </NavLink>\r\n            <div className={c.info__user}>\r\n                <span className={`${c.info__name} ${c.info__block}`}>\r\n                    Имя: {currentUser?.name}\r\n                </span>\r\n                <span className={`${c.info__phone} ${c.info__block}`}>\r\n                    Телефон: {currentUser?.phone}\r\n                </span>\r\n                <span className={`${c.info__address} ${c.info__block}`}>\r\n                    Адрес: {currentUser?.address}\r\n                </span>\r\n                <span className={`${c.info__type} ${c.info__block}`}>\r\n                    Физ. / Юр. {currentUser?.type}\r\n                </span>\r\n                <span className={`${c[\"info__name-organization\"]} ${c.info__block}`}>\r\n                    Название организации: {currentUser?.name_organization}\r\n                </span>\r\n                <span className={`${c.info__inn} ${c.info__block}`}>\r\n                    ИНН: {currentUser?.inn}\r\n                </span>\r\n                <span className={`${c.info__ogrn} ${c.info__block}`}>\r\n                    ОГРН: {currentUser?.ogrn}\r\n                </span>\r\n            </div>\r\n            <div className={c.info__orders}>\r\n                {\r\n                    currentUser?\r\n                        <Orders userId={Number(id)}/> : \"\"\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Info;","D:\\react\\admin-e\\src\\components\\Main\\Main.tsx",["154"],"import React, {useState} from \"react\";\r\nimport c from \"./Main.module.css\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport Input from \"../common/Input/Input\";\r\nimport {FormProvider, useForm} from \"react-hook-form\";\r\nimport {getValidateProps} from \"../utils/validate/validate\";\r\nimport Label from \"../common/Label/Lable\";\r\n\r\nconst Main = () => {\r\n    const [isChange, setIsChange] = useState(false);\r\n\r\n    const {id, name, email, position} = useSelector((state: AppStateType) => state.profile);\r\n\r\n    const methods = useForm({\r\n        shouldFocusError: false,\r\n    });\r\n\r\n    const {register, handleSubmit, errors} = methods;\r\n\r\n    const sendForm = (data: any) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={c.main}>\r\n            <div className={c.main__title + \" title\"}>\r\n                Информация о пользователе админ панели\r\n            </div>\r\n            <button className={c.main__button + \" btn\"} onClick={() => setIsChange(!isChange)}>\r\n                {isChange ? \"Закончить изменения\" : \"Изменить данные\"}\r\n            </button>\r\n            {!isChange ?\r\n                <>\r\n                    <div className={`${c.main__name} ${c.main__block}`}>\r\n                        Имя: {name}\r\n                    </div>\r\n                    <div className={`${c.main__email} ${c.main__block}`}>\r\n                        Email: {email}\r\n                    </div>\r\n                    <div className={`${c.main__position} ${c.main__block}`}>\r\n                        Должность: {position === \"admin\" ? \"Администратор\" : \"Менеджер\"}\r\n                    </div>\r\n                </>\r\n                :\r\n                <FormProvider {...methods}>\r\n                    <form className={c.main__form} onSubmit={handleSubmit(sendForm)}>\r\n                        <Label className={c.main__label}>\r\n                            <Input className={c.main__input} name=\"name\" type=\"\" placeholder=\"Имя\" error={true}\r\n                                   register={register} errorData={errors}\r\n                                   validateProps={getValidateProps({standart: [\"required\"], custom: []})}/>\r\n                        </Label>\r\n                        <Label className={c.main__label}>\r\n                            <Input className={c.main__input} name=\"password\" type=\"\" placeholder=\"Новый пароль\" error={true}\r\n                                   register={register} errorData={errors}\r\n                                   validateProps={getValidateProps({standart: [\"required\"], custom: []})}/>\r\n                        </Label>\r\n                        <Label className={c.main__label}>\r\n                            <Input className={c.main__input} name=\"password\" type=\"\" placeholder=\"Повторите пароль\"\r\n                                   error={true}\r\n                                   register={register} errorData={errors}\r\n                                   validateProps={getValidateProps({standart: [\"required\"], custom: []})}/>\r\n                        </Label>\r\n                        <button className={c.main__accept + \" btn\"}>\r\n                            Применить изменения\r\n                        </button>\r\n                    </form>\r\n                </FormProvider>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","D:\\react\\admin-e\\src\\components\\Page\\Page.tsx",["155","156","157"],"D:\\react\\admin-e\\src\\components\\utils\\validate\\validate.tsx",["158","159","160","161"],"\r\ntype GetValidatePropsType = (props: {standart: Array<string>, custom: Array<string>}) => ValidateCustomType\r\n\r\n\r\nexport const getValidateProps: GetValidatePropsType = (props) => {\r\n    let propsObj = {};\r\n    propsObj = getObject({...propsObj}, props.standart, \"standart\");\r\n\r\n        propsObj = getObject({...propsObj}, props.custom, \"custom\");\r\n\r\n\r\n    return {...propsObj};\r\n}\r\n\r\nconst getObject = (obj: ValidateCustomType, arr: string[], type: \"standart\" | \"custom\") => {\r\n    if(type === \"custom\") {\r\n        obj.validate = {};\r\n    }\r\n    for (let elem of arr) {\r\n        if(type === \"standart\") {\r\n            // @ts-ignore\r\n            obj[elem] = validateCustom[elem];\r\n        }else {\r\n            // @ts-ignore\r\n            obj[\"validate\"][elem] = validateCustom.validate[elem];\r\n        }\r\n    }\r\n    return {...obj};\r\n}\r\n\r\nexport type ValidateCustomType = {\r\n    required?: {value: boolean, message: string}\r\n    minLength?: {value: number, message: string}\r\n    validate?: {\r\n        isNumber?: (value: number | string) => boolean | string\r\n        isInn?: (value: string) => boolean | string\r\n        isProfileInn?: (value: string) => boolean | string //for change inn in profile page\r\n        isOgrn?: (value: string) => boolean | string\r\n        isProfileOgrn?: (value: string) => boolean | string //for change ogrn in profile page\r\n        profilePhone?: (value: string) => boolean | string\r\n        phone?: (value: string) => boolean | string\r\n        passwordLength?: (value: string) => boolean | string\r\n        passwordProfileLength?: (value: string) => boolean | string\r\n    }\r\n}\r\n\r\nconst validateCustom: ValidateCustomType = {\r\n    required: {\r\n        value: true,\r\n        message: \"Заполните все поля\",\r\n    },\r\n    minLength: {\r\n        value: 8,\r\n        message: \"Минимальная длина 8\",\r\n    },\r\n    validate: {\r\n        isNumber: value => (parseInt(value + \"\") && value > 0) || \"Некорректное значение\",\r\n        isInn: value => value.length === 10 || \"Поле должно иметь 10 символов\",\r\n        isProfileInn: value => value.length === 10 || value.length === 0 || \"Поле должно иметь 10 символов\",\r\n        isOgrn: value => value.length === 13 || \"Поле должно иметь 13 символов\",\r\n        isProfileOgrn: value => value.length === 13 || value.length === 0 || \"Поле должно иметь 13 символов\",\r\n        profilePhone: value => value.match(/\\+7 \\d{3} \\d{3}\\-\\d{2}\\-\\d{2}/) !== null || value.length === 0 || \"Неверно введен номер телефона\",\r\n        phone: value => value.match(/\\+7 \\d{3} \\d{3}\\-\\d{2}\\-\\d{2}/) !== null || \"Неверно введен номер телефона\",\r\n        passwordLength: value => value.length > 5 || \"Длина пароля должна быть не менее 6ти символов\",\r\n        passwordProfileLength: value => value.length > 5 || value.length === 0 || \"Длина пароля должна быть не менее 6ти символов\",\r\n    }\r\n}","D:\\react\\admin-e\\src\\components\\Orders\\Order\\Order.tsx",["162","163"],"import React, {useEffect, useState} from \"react\";\r\nimport c from \"./Order.module.css\";\r\nimport {NavLink, useParams} from \"react-router-dom\";\r\nimport Docs from \"./Docs/Docs\";\r\nimport {getOneOrder, OrderType} from \"../../redux/order-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype PropsType = {\r\n    type: \"list\" | \"info\"\r\n    index?: number\r\n    info?: OrderType\r\n}\r\n\r\nexport interface ParamsType {\r\n    id: string\r\n}\r\n\r\nconst Order: React.FC<PropsType> = (props) => {\r\n    const [infoOrder, setInfoOrder] = useState<null | OrderType | undefined>(null);\r\n\r\n    const {type, index, info} = props;\r\n\r\n    const {id} = useParams<ParamsType>();\r\n\r\n    const none = \"отсутствует\";\r\n\r\n    const isInfo = type === \"info\";\r\n\r\n    const dispatch = useDispatch();\r\n    const infoOfCurrent = useSelector((state: AppStateType) => state.orders.currentOrder);\r\n\r\n    useEffect(() => {\r\n        setInfoOrder(info);\r\n        if (!info) {\r\n            dispatch(getOneOrder(Number(id)));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(infoOfCurrent) {\r\n            setInfoOrder(infoOfCurrent);\r\n        }\r\n    }, [infoOfCurrent]);\r\n\r\n    useEffect(() => {\r\n        if(info) {\r\n            setInfoOrder(info);\r\n        }\r\n    }, [info])\r\n\r\n    return (\r\n        <>\r\n            {isInfo ? <NavLink to=\"/orders\" className={c.order__back + \" btn\"}>Назад</NavLink> : \"\"}\r\n            <div className={c.order}>\r\n                <div className={type === \"list\" ? c.order__top : `${c.order__top} ${c.order__column}`}>\r\n                    <div className={`${c.order__block} ${c[\"order__dostavista-id\"]}`}>\r\n                        Id достависты : {infoOrder && infoOrder.idDostavista? infoOrder.idDostavista : none}\r\n                    </div>\r\n                    <div className={`${c.order__block} ${c.order__cargo}`}>\r\n                        Название : {infoOrder && infoOrder.nameCargo ? infoOrder.nameCargo : none}\r\n                    </div>\r\n                    <div className={`${c.order__block} ${c.order__type}`}>\r\n                        Тип : {infoOrder && infoOrder.type ? infoOrder.type === \"docs\" ? \"документы\" : \"груз\" : none}\r\n                    </div>\r\n                    <div className={`${c.order__block} ${c.order__track}`}>\r\n                        Трек номер : {infoOrder && infoOrder.trackNumber? infoOrder.trackNumber : none}\r\n                    </div>\r\n                    <div className={isInfo? `${c.order__block} ${c.order__create} ${c.order__block_first}` : `${c.order__block} ${c.order__create}`}>\r\n                        Дата создания : {infoOrder && infoOrder.dateCreate ? infoOrder.dateCreate : none}\r\n                    </div>\r\n                </div>\r\n                <div className={type === \"list\" ? c.order__bottom : `${c.order__bottom} ${c.order__column}`}>\r\n                    <div className={`${c.order__block} ${c.order__from}`}>\r\n                        <div className={c.order__address}>\r\n                            Адрес От: {infoOrder && infoOrder.addressDispatch ? infoOrder.addressDispatch : none}\r\n                        </div>\r\n                        {\r\n                            infoOrder ? infoOrder.from.map((i, index) => {\r\n                                return (\r\n                                    <React.Fragment key={index}>\r\n                                        <div className={c.order__name}>\r\n                                            Имя: {i.name}\r\n                                        </div>\r\n                                        <div className={c.order__phone}>\r\n                                            Телефон: {i.phone}\r\n                                        </div>\r\n                                    </React.Fragment>\r\n                                );\r\n                            }) : none\r\n                        }\r\n                    </div>\r\n\r\n                    <div className={`${c.order__block} ${c.order__to}`}>\r\n                        <div className={c.order__addressS}>\r\n                            Адрес До: {infoOrder && infoOrder.addressDelivery ? infoOrder.addressDelivery : none}\r\n                        </div>\r\n                        {\r\n                            infoOrder ? infoOrder.to.map((i, index) => {\r\n                                return (\r\n                                    <React.Fragment key={index}>\r\n                                        <div className={c.order__name}>\r\n                                            Name: {i.name}\r\n                                        </div>\r\n                                        <div className={c.order__phone}>\r\n                                            Phone: {i.phone}\r\n                                        </div>\r\n                                    </React.Fragment>\r\n                                );\r\n                            }) : none\r\n                        }\r\n                    </div>\r\n                    <div className={`${c.order__block} ${c.order__status}`}>\r\n                        Статус: {infoOrder && infoOrder.status ? infoOrder.status : none}\r\n                    </div>\r\n                    <div className={`${c.order__block} ${c.order__document}`}>\r\n                        Количество документов в заказе: {infoOrder ? infoOrder.docsCount : none}\r\n                    </div>\r\n                </div>\r\n                {\r\n                    type === \"list\" ?\r\n                        <NavLink to={`/order/` + (infoOrder? infoOrder.id : 0)} className={c.order__link + \" btn\"}>\r\n                            Выбрать\r\n                        </NavLink>\r\n                        : \"\"\r\n                }\r\n            </div>\r\n            {\r\n                isInfo? <Docs orderId={infoOrder? infoOrder.id : 0}/> : \"\"\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Order;","D:\\react\\admin-e\\src\\components\\common\\Label\\Lable.tsx",[],"D:\\react\\admin-e\\src\\components\\common\\Input\\Input.tsx",["164","165","166","167","168","169","170","171","172","173","174"],"import React, {useEffect, useState} from \"react\";\r\nimport { ValidateCustomType } from \"../../utils/validate/validate\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {Controller, useFormContext} from \"react-hook-form\";\r\nimport MaskedInput from \"react-input-mask\"\r\nimport {clearAll} from \"../../redux/errors-reducer\";\r\nimport {clearAdressesAction, getCorrectAddress} from \"../../redux/form-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype RefReturn =\r\n    | string\r\n    | ((instance: HTMLInputElement | null) => void)\r\n    | React.RefObject<HTMLInputElement>\r\n    | null\r\n    | undefined;\r\n\r\nexport type RegisterType = (validateProps: any) => RefReturn\r\n\r\ntype PropsType = {\r\n    className: string\r\n    name: string\r\n    type: string\r\n    placeholder: string\r\n    error: boolean\r\n    validateProps?: any //ValidateCustomType\r\n    register?: RegisterType\r\n    errorData?:any /*{\r\n        name: {\r\n            type: string,\r\n            types: Array<{ validateName: string | boolean }>,\r\n            message: string,\r\n            ref: any,\r\n        }\r\n\r\n    }*/\r\n    value?: string\r\n    defaultValue?: string\r\n    setInputValue?: (value: string) => void //use state, to use old value, for example old address or old name and phone\r\n    inputValue?: string\r\n\r\n    disabled?: boolean\r\n    setError?: any //react hook form\r\n    customError?: {type: string, message: string}\r\n\r\n\r\n    autoComplete?: \"off\"//prompt standart of browser off\r\n}\r\n\r\nconst Input: React.FC<PropsType> = (props) => {\r\n    const [thisValue, setThisValue] = useState(\"\");\r\n    const [lastCorrectAddress, setLastCorrectAddress] = useState(\"\");\r\n    const [isInterval, setIsInterval] = useState(false);\r\n    const [intervalId, setIntervalId] = useState();\r\n\r\n    const { setValue, getValues, control } = useFormContext();\r\n\r\n    const { className, type, error, register, errorData, validateProps, setInputValue, setError, customError, inputValue, value, defaultValue, ...otherProps } = props;\r\n\r\n    const dispatch = useDispatch();\r\n    const { address, nameInputActive } = useSelector((state: AppStateType) => state.forms);//data from dadata (correct address)\r\n\r\n    useEffect( () => {\r\n        if(type === \"address\") {\r\n            setLastCorrectAddress(getValues(otherProps.name));\r\n        }\r\n        if(value) {\r\n            setThisValue(value);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(inputValue && inputValue !== \"\") {\r\n            setThisValue(inputValue);\r\n        }\r\n    }, [inputValue])\r\n\r\n    const changeValue = (e: any) => {\r\n        if(otherProps.name === \"val\" && +e.currentTarget.value > 50000) {\r\n            setValue(\"val\", \"50000\");\r\n        }\r\n        if(otherProps.name === \"address-dispatch\" || otherProps.name === \"address-delivery\" ||\r\n            otherProps.name === \"weight\" || otherProps.name === \"val\") {\r\n        }\r\n        if(type === \"address\") {\r\n            let value = e.currentTarget.value;\r\n\r\n            if(type === \"address\") {\r\n                addressControl(value);\r\n            }\r\n            //если функции не  существует, value не зависит от хуков(use state)\r\n            e.currentTarget.value = value;\r\n            setThisValue(value);\r\n        }\r\n        if(setError) {\r\n            dispatch(clearAll());//clear errors from server after ajax\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(type === \"address\") {\r\n            setValue(otherProps.name, lastCorrectAddress);\r\n        }\r\n    }, [lastCorrectAddress])\r\n\r\n    const changeAddress = (correctAddress: string) => {\r\n        setLastCorrectAddress(correctAddress);\r\n    }\r\n\r\n    const addressControl = (value: any) => {\r\n        if(intervalId) {\r\n            clearInterval(intervalId);\r\n        }\r\n        // @ts-ignore\r\n        setIntervalId(setTimeout(getAddresses, 500, value));\r\n        if(isInterval) {\r\n            return;\r\n        }\r\n        setIsInterval(true);\r\n    }\r\n\r\n    const getAddresses = (value: string) => {\r\n        setIsInterval(false);\r\n        dispatch(getCorrectAddress(value, otherProps.name));\r\n    }\r\n\r\n    const clearPromptOfAddress = () => {\r\n        if(type === \"address\") {\r\n            setValue(otherProps.name, lastCorrectAddress);\r\n            dispatch(clearAdressesAction());\r\n        }\r\n    }\r\n\r\n    if(type === \"textarea\") {\r\n        return(\r\n            <>\r\n                <textarea type={otherProps.name === \"password\" ? \"password\" : \"text\"}\r\n                       className={`${className} input ${errorData && errorData[otherProps.name] || setError? \"input_error\" : \"\"}`}\r\n                       {...otherProps}\r\n                    /*for react-hook-form*/\r\n                    // @ts-ignore\r\n                       ref={register && validateProps && !otherProps.disabled? register(validateProps) : register({})}\r\n                    /* for address, name, phone */\r\n                       onChange={(e) => changeValue(e)}\r\n                />\r\n                {errorData && errorData[otherProps.name]? <span className=\"label__error label__error-textarea\">{errorData[otherProps.name].message}</span> : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    if(register) {\r\n        return(\r\n            <>\r\n                {type === \"phone\"?\r\n                    /*<MaskedInput\r\n                        mask=\"+7 999 999-99-99\"\r\n                        onChange={(e) => setThisValue(e.target.value)}\r\n                        value={thisValue? thisValue : getValues(otherProps.name)}\r\n                        name={otherProps.name}\r\n                    >\r\n                        {(inputProps) => (\r\n                        <input type=\"text\"\r\n                               className={`${className} input ${errorData && errorData[otherProps.name] || setError? \"input_error\" : \"\"}`}\r\n                                name={inputProps.name}\r\n                               placeholder={otherProps.placeholder}*/\r\n                            /*for react-hook-form*/\r\n                               //ref={validateProps && !otherProps.disabled? register(validateProps) : register({})}\r\n                            /* for address, name, phone */\r\n                               //defaultValue={inputProps.value}\r\n                       /* />\r\n                        )}\r\n                    </MaskedInput>*/\r\n                        <Controller\r\n                            as={MaskedInput}\r\n                            className={`${className} input ${errorData && errorData[otherProps.name] || setError? \"input_error\" : \"\"}`}\r\n                            control={control}\r\n                            mask=\"+7 999 999-99-99\"\r\n                            defaultValue={thisValue}\r\n                            {...otherProps}\r\n                            rules={validateProps}\r\n                        />\r\n                    :\r\n                    <input type={otherProps.name === \"password\" || type === \"password\" ? \"password\" : \"text\"}\r\n                           className={`${className} input ${errorData && errorData[otherProps.name] || setError? \"input_error\" : \"\"}`}\r\n                           {...otherProps}\r\n                        /*for react-hook-form*/\r\n                           ref={(validateProps && !otherProps.disabled) || type === \"inn\"? register(validateProps) : register({})}\r\n                        /* for address, name, phone */\r\n                           onChange={type !== \"phone\"? (e) => changeValue(e) : () => \"\"}\r\n                           onInput={type === \"phone\"? (e) => changeValue(e) : () => \"\"}\r\n                           onBlur={() => clearPromptOfAddress()}\r\n                           defaultValue={thisValue}\r\n                           readOnly={type === \"date\"}\r\n                    />\r\n                }\r\n\r\n                {errorData && errorData[otherProps.name]? <span className=\"label__error\">{errorData[otherProps.name].message}</span> : \"\"}\r\n                {errorData && !errorData[otherProps.name] && setError? <span className=\"label__error\">{customError? customError.message : \"\"}</span> : \"\"}\r\n                {otherProps.name === nameInputActive ?\r\n                    <div className=\"addresses-prompt\">\r\n                        {address? address.map((a: any, index: number) => {\r\n                            return (\r\n                                <span key={index} className=\"address-prompt\" onMouseDown={() => changeAddress(a)}>{a}</span>\r\n                            );\r\n                        }) : \"\"\r\n                        }\r\n                    </div> : \"\"}\r\n            </>\r\n        );\r\n\r\n    }else {\r\n        if(type === \"address\") {\r\n            return (\r\n                <>\r\n                    <input type=\"text\"\r\n                           className={`${className} input ${errorData && errorData[otherProps.name] || setError ? \"input_error\" : \"\"}`}\r\n                           {...otherProps}\r\n                        /* for address, name, phone */\r\n                           onChange={(e) => changeValue(e)}\r\n                           onBlur={() => clearPromptOfAddress()}\r\n                           value={thisValue}\r\n                    />\r\n                    {otherProps.name === nameInputActive ?\r\n                        <div className=\"addresses-prompt\">\r\n                            {address? address.map((a: any) => {\r\n                                return (\r\n                                    <span className=\"address-prompt\" onMouseDown={() => changeAddress(a)}>{a}</span>\r\n                                );\r\n                            }) : \"\"\r\n                            }\r\n                        </div> : \"\"}\r\n                </>\r\n            );\r\n        }else {\r\n            return (\r\n                <>\r\n                    <input type={otherProps.name === \"password\" ? \"password\" : \"text\"}\r\n                           className={`${className} input`} {...otherProps}/>\r\n                </>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default Input;","D:\\react\\admin-e\\src\\components\\Users\\User\\User.tsx",[],"D:\\react\\admin-e\\src\\components\\common\\Manage\\Manage.tsx",["175"],"import React from \"react\";\r\nimport c from \"./Manage.module.css\";\r\n\r\ntype PropsType = {\r\n    countPages: number\r\n    currentPage: number\r\n    setCurrentPage: (page: number) => void\r\n}\r\n\r\n// @ts-ignore\r\nconst Manage: React.FC<PropsType> = (props) => {\r\n    const { countPages, currentPage, setCurrentPage } = props;\r\n\r\n    const numbers = [];\r\n\r\n    for(let i = 1; i <= countPages; i++) {\r\n        numbers.push(i);\r\n    }\r\n\r\n    const changeCurrentPage = (page: number) => {\r\n        if(page === 0) {\r\n            return;\r\n        }\r\n        setCurrentPage(page);\r\n    }\r\n\r\n    if(countPages === 0) {\r\n        return \"\";\r\n    }\r\n\r\n    return(\r\n        <div className={c[\"manage-page\"]}>\r\n            <div className={`${c[\"manage-page__left\"]} ${c[\"manage-arrow\"]}`} onClick={() => changeCurrentPage(currentPage <= 1? 0 : currentPage - 1)}>Назад</div>\r\n            <div className={c[\"manage-page__content\"]}>\r\n                {\r\n                    numbers.map((n, index) => {\r\n                        if(n === currentPage) {\r\n                            return <div className={`${c[\"manage-page__numb\"]} ${c[\"manage-page__numb_active\"]}`} key={index}>{n}</div>\r\n                        }\r\n                        if(n === 1 || n === countPages) {\r\n                            return <div className={c[\"manage-page__numb\"]} onClick={() => changeCurrentPage(n)} key={index}>{n}</div>\r\n                        }\r\n                        if(n === currentPage - 1 || n === currentPage + 1) {\r\n                            return <div className={`${c[\"manage-page__numb\"]} ${c[\"manage-page__other\"]}`}\r\n                                        onClick={() => changeCurrentPage(n === currentPage - 1? n - 1 : n + 1)} key={index}>...</div>\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n            <div className={`${c[\"manage-page__right\"]} ${c[\"manage-arrow\"]}`} onClick={() => changeCurrentPage(currentPage >= countPages? 0 : currentPage + 1)}>Вперед</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Manage;","D:\\react\\admin-e\\src\\components\\Orders\\Order\\Docs\\Docs.tsx",["176","177"],"import React, {useState} from \"react\";\r\nimport c from \"./Docs.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport Label from \"../../../common/Label/Lable\";\r\nimport Input from \"../../../common/Input/Input\";\r\nimport {FormProvider, useForm} from \"react-hook-form\";\r\nimport Radios from \"../../../common/Radios/Radios\";\r\nimport {deleteFile, getOneOrder, sendFile} from \"../../../redux/order-reducer\";\r\nimport {getValidateProps} from \"../../../utils/validate/validate\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {ParamsType} from \"../Order\";\r\n\r\ntype PropsType = {\r\n    orderId: number\r\n};\r\n\r\nexport type SendFileDataType = {\r\n    file: any\r\n    doc_type: string\r\n    doc_name: string\r\n}\r\n\r\nconst Docs: React.FC<PropsType> = (props) => {\r\n    const [fileInfo, setFileInfo] = useState(null);\r\n    const docs = useSelector((state: AppStateType) => state.orders.currentDocs);\r\n\r\n    const { orderId } = props;\r\n\r\n    const {id} = useParams<ParamsType>();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const methods = useForm({\r\n        shouldFocusError: false\r\n    });\r\n\r\n    const { handleSubmit, register, errors, setValue } = methods;\r\n\r\n    const deleteDoc = async (docId: number) => {\r\n        await dispatch(deleteFile(docId));\r\n        await dispatch(getOneOrder(Number(id)));\r\n    }\r\n\r\n    const sendForm = async (data: SendFileDataType) => {\r\n        console.log(data);\r\n        const sendData = {\r\n            doc_name: data.doc_name,\r\n            doc_type: data.doc_type,\r\n            file: data.file[0],\r\n        }\r\n        await dispatch(sendFile(sendData, orderId));\r\n        await dispatch(getOneOrder(Number(id)));\r\n        await setFileInfo(null);\r\n        await setValue(\"file\", null);\r\n    }\r\n\r\n    const changeInput = (e: any) => {\r\n        const name = e.currentTarget.files[0].name;\r\n        setFileInfo(name);\r\n    }\r\n\r\n    const cancelForm = (e: any) => {\r\n        e.preventDefault();\r\n        setFileInfo(null);\r\n        setValue(\"file\", null);\r\n    }\r\n\r\n    return(\r\n        <div className={c.docs}>\r\n            <div className={c.docs__subtitle + \" title\"}>Документы</div>\r\n            {\r\n                docs && docs.length?\r\n                    <div className={c.docs__window}>\r\n                        <div className={c.docs__top}>\r\n                            <div className={`${c.docs__head} ${c.docs__index}`}>\r\n                                №\r\n                            </div>\r\n                            <div className={`${c.docs__head} ${c.docs__name}`}>\r\n                                Название\r\n                            </div>\r\n                            <div className={`${c.docs__head} ${c.docs__type}`}>\r\n                                Тип\r\n                            </div>\r\n                            <div className={`${c.docs__head} ${c.docs__link}`}>\r\n\r\n                            </div>\r\n                            <div className={`${c.docs__head} ${c.docs__delete}`}>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className={c.docs__main}>\r\n                            {\r\n                                docs.map( (d, index) => {\r\n                                    return(\r\n                                        <div key={index} className={c.docs__row}>\r\n                                            <div className={`${c.docs__td} ${c.docs__index}`}>\r\n                                                {index + 1}\r\n                                            </div>\r\n                                            <div className={`${c.docs__td} ${c.docs__name}`}>\r\n                                                {d.name}\r\n                                            </div>\r\n                                            <div className={`${c.docs__td} ${c.docs__type}`}>\r\n                                                {d.doc_type}\r\n                                            </div>\r\n                                            <div className={`${c.docs__td} ${c.docs__link}`}>\r\n                                                <a className={c.docs__download} href={d.path} target=\"_blank\" download={true}>Скачать</a>\r\n                                            </div>\r\n                                            <div className={`${c.docs__td} ${c.docs__delete}`} onClick={() => deleteDoc(d.id)}>\r\n                                                Удалить\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    : \"Документов нет\"\r\n            }\r\n\r\n                <FormProvider {...methods}>\r\n                    <form className={c.docs__form} onSubmit={handleSubmit(sendForm)}>\r\n                        <input type=\"file\" name=\"file\" id=\"download-doc\" className={c.docs_none}\r\n                               onChange={(e) => changeInput(e)} ref={register}/>\r\n                        {!fileInfo?\r\n                            <>\r\n                                <div className={c.docs__title}>\r\n                                    Загрузить файлы\r\n                                </div>\r\n                                <Label>\r\n                                    <label htmlFor=\"download-doc\" className={c.docs__label}>\r\n                                        Загрузить новый файл\r\n                                    </label>\r\n                                </Label>\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <div className={c[\"docs__file-name\"]}>\r\n                                    Загружаемый файл: {fileInfo}\r\n                                </div>\r\n                                <Input className={c.docs__input} name=\"doc_name\" type=\"\"\r\n                                       placeholder=\"Название документа\"\r\n                                       error={true} register={register}\r\n                                       validateProps={getValidateProps({standart: [\"required\"], custom: []})}/>\r\n                                <Radios className={c.docs__radio} name=\"doc_type\" inputs={[\r\n                                    {value: \"Бухгалтерский\", html: \"Бухгалтерский\", afterId: \"buh\", beforeId: \"doc\", register},\r\n                                    {value: \"Иной\", html: \"Иной\", afterId: \"other\", beforeId: \"doc\", register}\r\n                                ]}/>\r\n                                <button className={c.docs__button + \" btn\"}>\r\n                                    Сохранить\r\n                                </button>\r\n                                <button className={c.docs__button + \" btn\"} onClick={(e) => cancelForm(e)}>\r\n                                    Отменить\r\n                                </button>\r\n                            </>\r\n                        }\r\n                    </form>\r\n                </FormProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Docs;","D:\\react\\admin-e\\src\\components\\common\\Radios\\Radios.tsx",["178"],"import React, {useEffect, useState} from \"react\";\r\nimport {RegisterType} from \"../Input/Input\";\r\n\r\ntype PropsType = {\r\n    className: string\r\n    name: string\r\n    inputs: Array<{\r\n        beforeId: string\r\n        afterId: string\r\n        value:string\r\n        html: string\r\n        classNameInput?:string\r\n        classNameLabel?: string\r\n        register?: RegisterType\r\n    }>\r\n    setTypeCargo?: (type: string) => void\r\n    disabled?: boolean\r\n    indexValueDefault?: number\r\n}\r\n\r\nconst Radios: React.FC<PropsType> = (props) => {\r\n    const [radioActive, setRadioActive] = useState(0);\r\n\r\n    const { className, inputs, name, setTypeCargo, disabled, indexValueDefault } = props;\r\n\r\n    const changeValue = (index: number, value: string) => {\r\n        setRadioActive(index);\r\n        if(setTypeCargo) {\r\n            setTypeCargo(value);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(indexValueDefault !== undefined && (!isNaN(indexValueDefault))) {\r\n            setRadioActive(indexValueDefault);\r\n        }\r\n    }, [])\r\n\r\n    return(\r\n        <div className={`${className} radios`}>\r\n            {inputs.map( (i, index) => {\r\n                return(\r\n                    <React.Fragment key={index}>\r\n                        {!disabled?\r\n                            <input type=\"radio\" id={`${i.beforeId}-radio-${i.afterId}`}\r\n                                   className={`${i.classNameInput} radio`}\r\n                                   name={name}\r\n                                   value={i.value}\r\n                                   ref={i.register}\r\n                                    defaultChecked={index === radioActive}/> : \"\"\r\n                        }\r\n\r\n                        <label htmlFor={`${i.beforeId}-radio-${i.afterId}`} className={`${i.classNameLabel} label label_radio`} onClick={() => changeValue(index, i.value)}>\r\n                            {i.html}\r\n                        </label>\r\n                    </React.Fragment>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Radios;","D:\\react\\admin-e\\src\\components\\redux\\page-reducer.ts",["179"],"import {DataTableType} from \"../Page/Page\";\r\n\r\nconst SET_PAGE_DATA = \"SET_PAGE_DATA\";\r\nconst ADD_ROW = \"ADD_ROW\";\r\nconst ADD_COLUMN = \"ADD_COLUMN\";\r\nconst DELETE_ROW = \"DELETE_ROW\";\r\nconst DELETE_COLUMN = \"DELETE_COLUMN\";\r\n\r\nconst initialState = {\r\n    name: null as string | null,\r\n    titleTop: null as string | null,\r\n    titleMain: null as string | null,\r\n    titleDoc: null as string | null,\r\n    table: {\r\n        head: [\"Вес, кг\", \"Зона 1\", \"Зона 2\", \"Зона 3\", \"Зона 4\", \"Зона 5\"],\r\n        body: [\r\n            [\"0,5\", \"1010\", \"1596\", \"1848\", \"1987\", \"2198\"],\r\n            [\"0,5\", \"1010\", \"1596\", \"1848\", \"1987\", \"2198\"],\r\n            [\"0,5\", \"1010\", \"1596\", \"1848\", \"1987\", \"2198\"],\r\n            [\"0,5\", \"1010\", \"1596\", \"1848\", \"1987\", \"2198\"],\r\n            [\"0,5\", \"1010\", \"1596\", \"1848\", \"1987\", \"2198\"]\r\n        ],\r\n    } as DataTableType | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst pageReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_PAGE_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case ADD_COLUMN:\r\n            return {\r\n                ...state,\r\n                table: state.table? {\r\n                    head: [...state.table.head, \"\"],\r\n                    body: state.table.body.map((arr) => [...arr, \"\"]),\r\n                } : null,\r\n            }\r\n        case ADD_ROW:\r\n            return {\r\n                ...state,\r\n                table: state.table? {\r\n                    head: state.table.head,\r\n                    body: [...state.table.body, Array.from([...state.table.body[0]], (t) => \"\")],\r\n                } : null,\r\n            }\r\n        case DELETE_ROW:\r\n            return {\r\n                ...state,\r\n                table: state.table? {\r\n                    ...state.table,\r\n                    body: state.table.body.filter((c, index) => index !== action.index),\r\n                } : null\r\n            }\r\n        case DELETE_COLUMN:\r\n            return {\r\n                ...state,\r\n                table: state.table? {\r\n                    head: state.table.head.filter((c, index) => index !== action.index),\r\n                    body: state.table.body.map((arr) => arr.filter((c, index) => index !== action.index)),\r\n                } : null\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionTypes = SetPageDataActionType | AddRowActionType | AddColumnActionType | DeleteRowActionType\r\n                | DeleteColumnActionType\r\n\r\ntype PageData = {\r\n    name: string\r\n    titleTop: string\r\n    titleMain: string\r\n    titleDoc: string\r\n    tabel: DataTableType\r\n}\r\n\r\ntype SetPageDataActionType = {\r\n    type: typeof SET_PAGE_DATA\r\n    data: PageData\r\n}\r\n\r\nconst setPageDataAction = (data: PageData): SetPageDataActionType => ({type: SET_PAGE_DATA, data});\r\n\r\ntype AddRowActionType = {\r\n    type: typeof ADD_ROW\r\n}\r\n\r\nexport const addColumnAction = (): AddRowActionType => ({type: ADD_ROW});\r\n\r\ntype AddColumnActionType = {\r\n    type: typeof ADD_COLUMN\r\n}\r\n\r\nexport const addRowAction = (): AddColumnActionType => ({type: ADD_COLUMN});\r\n\r\ntype DeleteRowActionType = {\r\n    type: typeof DELETE_ROW\r\n    index: number\r\n}\r\n\r\nexport const deleteRowAction = (index: number): DeleteRowActionType => ({type: DELETE_ROW, index});\r\n\r\ntype DeleteColumnActionType = {\r\n    type: typeof DELETE_COLUMN\r\n    index: number\r\n}\r\n\r\nexport const deleteColumnAction = (index: number): DeleteColumnActionType => ({type: DELETE_COLUMN, index});\r\n\r\nexport default pageReducer;",{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":7,"column":8,"nodeType":"186","messageId":"187","endLine":7,"endColumn":12},{"ruleId":"188","severity":1,"message":"189","line":18,"column":8,"nodeType":"190","endLine":18,"endColumn":10,"suggestions":"191"},{"ruleId":"192","severity":1,"message":"193","line":1,"column":43,"nodeType":"186","messageId":"187","endLine":1,"endColumn":50},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"188","severity":1,"message":"194","line":35,"column":8,"nodeType":"190","endLine":35,"endColumn":20,"suggestions":"195"},{"ruleId":"192","severity":1,"message":"196","line":14,"column":12,"nodeType":"186","messageId":"187","endLine":14,"endColumn":23},{"ruleId":"192","severity":1,"message":"197","line":14,"column":25,"nodeType":"186","messageId":"187","endLine":14,"endColumn":39},{"ruleId":"188","severity":1,"message":"198","line":24,"column":8,"nodeType":"190","endLine":24,"endColumn":10,"suggestions":"199"},{"ruleId":"188","severity":1,"message":"200","line":28,"column":8,"nodeType":"190","endLine":28,"endColumn":29,"suggestions":"201"},{"ruleId":"188","severity":1,"message":"200","line":34,"column":8,"nodeType":"190","endLine":34,"endColumn":16,"suggestions":"202"},{"ruleId":"192","severity":1,"message":"203","line":12,"column":9,"nodeType":"186","messageId":"187","endLine":12,"endColumn":34},{"ruleId":"192","severity":1,"message":"204","line":20,"column":26,"nodeType":"186","messageId":"187","endLine":20,"endColumn":41},{"ruleId":"188","severity":1,"message":"205","line":30,"column":8,"nodeType":"190","endLine":30,"endColumn":10,"suggestions":"206"},{"ruleId":"188","severity":1,"message":"200","line":34,"column":8,"nodeType":"190","endLine":34,"endColumn":29,"suggestions":"207"},{"ruleId":"188","severity":1,"message":"208","line":38,"column":8,"nodeType":"190","endLine":38,"endColumn":52,"suggestions":"209"},{"ruleId":"192","severity":1,"message":"210","line":4,"column":21,"nodeType":"186","messageId":"187","endLine":4,"endColumn":29},{"ruleId":"188","severity":1,"message":"211","line":20,"column":8,"nodeType":"190","endLine":20,"endColumn":10,"suggestions":"212"},{"ruleId":"192","severity":1,"message":"213","line":13,"column":12,"nodeType":"186","messageId":"187","endLine":13,"endColumn":14},{"ruleId":"192","severity":1,"message":"214","line":1,"column":16,"nodeType":"186","messageId":"187","endLine":1,"endColumn":24},{"ruleId":"192","severity":1,"message":"215","line":24,"column":26,"nodeType":"186","messageId":"187","endLine":24,"endColumn":32},{"ruleId":"192","severity":1,"message":"216","line":43,"column":11,"nodeType":"186","messageId":"187","endLine":43,"endColumn":28},{"ruleId":"217","severity":1,"message":"218","line":62,"column":60,"nodeType":"219","messageId":"220","endLine":62,"endColumn":61,"suggestions":"221"},{"ruleId":"217","severity":1,"message":"218","line":62,"column":67,"nodeType":"219","messageId":"220","endLine":62,"endColumn":68,"suggestions":"222"},{"ruleId":"217","severity":1,"message":"218","line":63,"column":53,"nodeType":"219","messageId":"220","endLine":63,"endColumn":54,"suggestions":"223"},{"ruleId":"217","severity":1,"message":"218","line":63,"column":60,"nodeType":"219","messageId":"220","endLine":63,"endColumn":61,"suggestions":"224"},{"ruleId":"192","severity":1,"message":"225","line":22,"column":18,"nodeType":"186","messageId":"187","endLine":22,"endColumn":23},{"ruleId":"188","severity":1,"message":"226","line":38,"column":8,"nodeType":"190","endLine":38,"endColumn":10,"suggestions":"227"},{"ruleId":"192","severity":1,"message":"228","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":28},{"ruleId":"188","severity":1,"message":"229","line":69,"column":8,"nodeType":"190","endLine":69,"endColumn":10,"suggestions":"230"},{"ruleId":"188","severity":1,"message":"231","line":103,"column":8,"nodeType":"190","endLine":103,"endColumn":28,"suggestions":"232"},{"ruleId":"233","severity":1,"message":"234","line":137,"column":67,"nodeType":"235","messageId":"236","endLine":137,"endColumn":69},{"ruleId":"233","severity":1,"message":"234","line":137,"column":97,"nodeType":"235","messageId":"236","endLine":137,"endColumn":99},{"ruleId":"233","severity":1,"message":"234","line":174,"column":72,"nodeType":"235","messageId":"236","endLine":174,"endColumn":74},{"ruleId":"233","severity":1,"message":"234","line":174,"column":102,"nodeType":"235","messageId":"236","endLine":174,"endColumn":104},{"ruleId":"233","severity":1,"message":"234","line":183,"column":71,"nodeType":"235","messageId":"236","endLine":183,"endColumn":73},{"ruleId":"233","severity":1,"message":"234","line":183,"column":101,"nodeType":"235","messageId":"236","endLine":183,"endColumn":103},{"ruleId":"233","severity":1,"message":"234","line":215,"column":71,"nodeType":"235","messageId":"236","endLine":215,"endColumn":73},{"ruleId":"233","severity":1,"message":"234","line":215,"column":101,"nodeType":"235","messageId":"236","endLine":215,"endColumn":103},{"ruleId":"237","severity":1,"message":"238","line":36,"column":44,"nodeType":"239","messageId":"240","endLine":36,"endColumn":46},{"ruleId":"192","severity":1,"message":"215","line":38,"column":37,"nodeType":"186","messageId":"187","endLine":38,"endColumn":43},{"ruleId":"241","severity":1,"message":"242","line":107,"column":49,"nodeType":"243","endLine":107,"endColumn":127},{"ruleId":"188","severity":1,"message":"244","line":37,"column":8,"nodeType":"190","endLine":37,"endColumn":10,"suggestions":"245"},{"ruleId":"192","severity":1,"message":"246","line":88,"column":7,"nodeType":"186","messageId":"187","endLine":88,"endColumn":24},"no-native-reassign",["247"],"no-negated-in-lhs",["248"],"no-unused-vars","'Auth' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["249"],"@typescript-eslint/no-unused-vars","'compose' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'setError'. Either include them or remove the dependency array.",["250"],"'userIdState' is assigned a value but never used.","'setUserIdState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getOrdersWithFilters'. Either include it or remove the dependency array.",["251"],"React Hook useEffect has a missing dependency: 'changeCurrentPage'. Either include it or remove the dependency array.",["252"],["253"],"'setCurrentPageOrderAction' is defined but never used.","'setSearchFilter' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'countNeed', 'currentPage', and 'dispatch'. Either include them or remove the dependency array.",["254"],["255"],"React Hook useEffect has a missing dependency: 'changeFilter'. Either include it or remove the dependency array.",["256"],"'UserType' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["257"],"'id' is assigned a value but never used.","'useState' is defined but never used.","'errors' is assigned a value but never used.","'tableDeleteColumn' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["258","259"],["260","261"],["262","263"],["264","265"],"'index' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'id', and 'info'. Either include them or remove the dependency array.",["266"],"'ValidateCustomType' is defined but never used.","React Hook useEffect has missing dependencies: 'getValues', 'otherProps.name', 'type', and 'value'. Either include them or remove the dependency array.",["267"],"React Hook useEffect has missing dependencies: 'otherProps.name', 'setValue', and 'type'. Either include them or remove the dependency array.",["268"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","React Hook useEffect has a missing dependency: 'indexValueDefault'. Either include it or remove the dependency array.",["269"],"'setPageDataAction' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"276","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"messageId":"287","fix":"288","desc":"289"},{"messageId":"290","fix":"291","desc":"292"},{"messageId":"287","fix":"293","desc":"289"},{"messageId":"290","fix":"294","desc":"292"},{"messageId":"287","fix":"295","desc":"289"},{"messageId":"290","fix":"296","desc":"292"},{"messageId":"287","fix":"297","desc":"289"},{"messageId":"290","fix":"298","desc":"292"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},"Update the dependencies array to be: [dispatch]",{"range":"307","text":"308"},"Update the dependencies array to be: [dispatch, loginError, setError]",{"range":"309","text":"310"},"Update the dependencies array to be: [getOrdersWithFilters]",{"range":"311","text":"312"},"Update the dependencies array to be: [changeCurrentPage, currentPageOfManage]",{"range":"313","text":"314"},"Update the dependencies array to be: [changeCurrentPage, userId]",{"range":"315","text":"316"},"Update the dependencies array to be: [countNeed, currentPage, dispatch]",{"range":"317","text":"318"},{"range":"319","text":"314"},"Update the dependencies array to be: [nameFilter, dateCreateFilter, searchFilter, changeFilter]",{"range":"320","text":"321"},"Update the dependencies array to be: [dispatch, id]",{"range":"322","text":"323"},"removeEscape",{"range":"324","text":"325"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"326","text":"327"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"328","text":"325"},{"range":"329","text":"327"},{"range":"330","text":"325"},{"range":"331","text":"327"},{"range":"332","text":"325"},{"range":"333","text":"327"},"Update the dependencies array to be: [dispatch, id, info]",{"range":"334","text":"335"},"Update the dependencies array to be: [getValues, otherProps.name, type, value]",{"range":"336","text":"337"},"Update the dependencies array to be: [lastCorrectAddress, otherProps.name, setValue, type]",{"range":"338","text":"339"},"Update the dependencies array to be: [indexValueDefault]",{"range":"340","text":"341"},[628,630],"[dispatch]",[1266,1278],"[dispatch, loginError, setError]",[864,866],"[getOrdersWithFilters]",[931,952],"[changeCurrentPage, currentPageOfManage]",[1054,1062],"[changeCurrentPage, userId]",[1223,1225],"[countNeed, currentPage, dispatch]",[1290,1311],[1371,1415],"[nameFilter, dateCreateFilter, searchFilter, changeFilter]",[664,666],"[dispatch, id]",[2379,2380],"",[2379,2379],"\\",[2386,2387],[2386,2386],[2516,2517],[2516,2516],[2523,2524],[2523,2523],[1068,1070],"[dispatch, id, info]",[2375,2377],"[getValues, otherProps.name, type, value]",[3469,3489],"[lastCorrectAddress, otherProps.name, setValue, type]",[1029,1031],"[indexValueDefault]"]